{"version":3,"file":"13b8b1d9-00291c343125dc2899f9.js","mappings":"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","sources":["webpack://binary-studio-academy-2021-stage-2/./src/pages/lectures/dotnet-ecosystem-and-csharp-best-practices/ua/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Lecture, SlackMessage, TimelineOfContents, Level, ThatsAllFolks, VideoWrapper, Language } from \"../../../../components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFacebookSquare, faGithub, faLinkedin, faSkype } from \"@fortawesome/free-brands-svg-icons\";\nimport { ivanHedz2023Avatar } from \"../../../../assets/images/avatars/intro-rounded\";\nimport aEtoMagazin from \"../assets/images/a-eto-magazin.png\";\nimport exceptionClassHierarchy from \"../assets/images/exception-class-hierarchy.jpg\";\nimport boxingUnboxing from \"../assets/images/boxing-unboxing.gif\";\nimport constraintsTypes from \"../assets/images/constraints-types.png\";\nimport nugetLogo from \"../assets/images/nuget-logo.png\";\nimport dotnetPlatform from \"../assets/images/dotnet-platform.jpg\";\nimport dotnet6Platform from \"../assets/images/net-6-ecosystem.png\";\nimport lambdaExpressionStructure from \"../assets/images/lambda-expression-structure.png\";\nimport delegateEventFlow from \"../assets/images/delegate-event-flow.png\";\nimport collectionsHierarchy from \"../assets/images/collections-hierarchy.jpg\";\nimport stack from \"../assets/images/stack.jpg\";\nimport stackAndHeap from \"../assets/images/stack-and-heap.gif\";\nimport SnippetL02S01 from \"../assets/snippets/snippet-l02-s01.mdx\";\nimport SnippetL02S02 from \"../assets/snippets/snippet-l02-s02.mdx\";\nimport SnippetL02S03 from \"../assets/snippets/snippet-l02-s03.mdx\";\nimport SnippetL02S04 from \"../assets/snippets/snippet-l02-s04.mdx\";\nimport SnippetL02S05 from \"../assets/snippets/snippet-l02-s05.mdx\";\nimport SnippetL02S06 from \"../assets/snippets/snippet-l02-s06.mdx\";\nimport SnippetL02S07 from \"../assets/snippets/snippet-l02-s07.mdx\";\nimport SnippetL03S01 from \"../assets/snippets/snippet-l03-s01.mdx\";\nimport SnippetL03S02 from \"../assets/snippets/snippet-l03-s02.mdx\";\nimport SnippetL03S03 from \"../assets/snippets/snippet-l03-s03.mdx\";\nimport SnippetL03S04 from \"../assets/snippets/snippet-l03-s04.mdx\";\nimport SnippetL03S05 from \"../assets/snippets/snippet-l03-s05.mdx\";\nimport SnippetL03S06 from \"../assets/snippets/snippet-l03-s06.mdx\";\nimport SnippetL03S07 from \"../assets/snippets/snippet-l03-s07.mdx\";\nimport SnippetL03S08 from \"../assets/snippets/snippet-l03-s08.mdx\";\nimport SnippetL03S09 from \"../assets/snippets/snippet-l03-s09.mdx\";\nimport SnippetL03S10 from \"../assets/snippets/snippet-l03-s10.mdx\";\nimport SnippetL03S11 from \"../assets/snippets/snippet-l03-s11.mdx\";\nimport SnippetL03S12 from \"../assets/snippets/snippet-l03-s12.mdx\";\nimport SnippetL03S13 from \"../assets/snippets/snippet-l03-s13.mdx\";\nimport SnippetL03S14 from \"../assets/snippets/snippet-l03-s14.mdx\";\nimport SnippetL03S15 from \"../assets/snippets/snippet-l03-s15.mdx\";\nimport SnippetL03S16 from \"../assets/snippets/snippet-l03-s16.mdx\";\nimport SnippetL03S17 from \"../assets/snippets/snippet-l03-s17.mdx\";\nimport SnippetL03S18 from \"../assets/snippets/snippet-l03-s18.mdx\";\nimport SnippetL03S19 from \"../assets/snippets/snippet-l03-s19.mdx\";\nimport SnippetL03S20 from \"../assets/snippets/snippet-l03-s20.mdx\";\nimport SnippetL03S21 from \"../assets/snippets/snippet-l03-s21.mdx\";\nimport SnippetL03S22 from \"../assets/snippets/snippet-l03-s22.mdx\";\nimport SnippetL03S23 from \"../assets/snippets/snippet-l03-s23.mdx\";\nimport SnippetL03S24 from \"../assets/snippets/snippet-l03-s24.mdx\";\nimport SnippetL03S25 from \"../assets/snippets/snippet-l03-s25.mdx\";\nimport SnippetL03S26 from \"../assets/snippets/snippet-l03-s26.mdx\";\nimport SnippetL03S27 from \"../assets/snippets/snippet-l03-s27.mdx\";\nimport SnippetL03S28 from \"../assets/snippets/snippet-l03-s28.mdx\";\nimport SnippetL03S29 from \"../assets/snippets/snippet-l03-s29.mdx\";\nimport SnippetL03S30 from \"../assets/snippets/snippet-l03-s30.mdx\";\nimport SnippetL03S31 from \"../assets/snippets/snippet-l03-s31.mdx\";\nimport SnippetL03S32 from \"../assets/snippets/snippet-l03-s32.mdx\";\nimport SnippetL03S33 from \"../assets/snippets/snippet-l03-s33.mdx\";\nimport SnippetL03S34 from \"../assets/snippets/snippet-l03-s34.mdx\";\nimport SnippetL04S01 from \"../assets/snippets/snippet-l04-s01.mdx\";\nimport SnippetL04S02 from \"../assets/snippets/snippet-l04-s02.mdx\";\nimport SnippetL04S03 from \"../assets/snippets/snippet-l04-s03.mdx\";\nimport SnippetL04S04 from \"../assets/snippets/snippet-l04-s04.mdx\";\nimport SnippetL04S05 from \"../assets/snippets/snippet-l04-s05.mdx\";\nimport SnippetL04S06 from \"../assets/snippets/snippet-l04-s06.mdx\";\nimport SnippetL04S07 from \"../assets/snippets/snippet-l04-s07.mdx\";\nimport SnippetL04S08 from \"../assets/snippets/snippet-l04-s08.mdx\";\nimport SnippetL04S09 from \"../assets/snippets/snippet-l04-s09.mdx\";\nimport SnippetL04S10 from \"../assets/snippets/snippet-l04-s10.mdx\";\nimport SnippetL04S11 from \"../assets/snippets/snippet-l04-s11.mdx\";\nimport SnippetL04S12 from \"../assets/snippets/snippet-l04-s12.mdx\";\nimport \"../styles.css\";\nexport const metadata = {\n  orderId: 4,\n  author: \"Ivan Hedz\",\n  title: \".NET ecosystem and C# best practices\",\n  description: \"Ivan makes an overview of <strong>.NET</strong> ecosystem, tell us deep insides about <strong>С#</strong> and to top it all off tells about clean code principals.\",\n  keywords: [\"dotnet\", \"ecosystem\"],\n  duration: \"35 min\",\n  publishedAt: \"2023-01-15T00:00:00\",\n  hiddenFromMainPage: true\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = Lecture;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div><h1><strong>.NET ecosystem and C# best practices</strong></h1></div>\n    <Language currentLanguage=\"ua\" languages={{\n      \"en\": \"lectures/dotnet-ecosystem-and-csharp-best-practices/en\",\n      \"ua\": \"lectures/dotnet-ecosystem-and-csharp-best-practices/ua\"\n    }} mdxType=\"Language\" />\n    <VideoWrapper duration=\"35 хв\" mdxType=\"VideoWrapper\">\n  <iframe src=\"https://youtu.be/qESDPe_Gj5Y\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </VideoWrapper>\n    <div>\n  <div className=\"author\">\n    <div className=\"avatar-wrapper\">\n      <object className=\"avatar-object\" data={ivanHedz2023Avatar} role=\"img\" aria-label=\"My profile picture\"></object>\n    </div>\n    <div className=\"profile\">\n      <h3 className=\"name\">Іван Гедзь</h3>\n      <p className=\"about\">\n        Іван працює Full Stack веб-розробником у <a href=\"https://binary-studio.com\"><strong>Binary Studio</strong></a>. Пише на C# і TypeScript. З хобі ― слухати музику, грати в аркади, займатися йогою. Вирішив вперше записати лекцію для Академії, щоб тобі було легше розібратися з екосистемою .NET.\n      </p>\n    </div>\n  </div>\n  <div className=\"bubble\" style={{\n        \"margin\": \"-0.5em 1em 1em\"\n      }}>\n    <strong className=\"dorov\">Привіт!</strong>\n    <br />\n   Лекція про екосистему .NET та кращі практики написання C#-коду почнеться за 5..4..3... Але спочатку 🥁 кілька дісклеймерів про саму ж лекцію:\n    <ol className=\"compact inverted\">\n      <li>багато з чого, про що йдеться у лекції, ви вже мабуть чули (або ні);</li>\n      <li>деякі теми та терміни висвітлюються поверхнево, не вдаючись у деталі;</li>\n      <li>лекція може здатися затягнутою, але believe me — це швидше, ніж прошуршати документацію MSDN-у в пошуках потрібної інфи 😝.</li>\n    </ol>\n    <p>Вам також знадобиться стартовий пакет розробника .NET: <a href=\"https://dotnet.microsoft.com/download\" title=\".NET\"><strong>.NET</strong></a>, <a href=\"https://git-scm.com/\" title=\"Git\"><strong>Git</strong></a>, <a href=\"https://visualstudio.microsoft.com/\" title=\"Visual Studio\"><strong>Visual Studio</strong></a> або <a href=\"https://www.jetbrains.com/rider/\" title=\"Rider\"><strong>Rider</strong></a>.\n    </p>\n  </div>\n    </div>\n    <div id=\"table-of-contents\" className=\"table-of-contents\" style={{\n      \"marginTop\": \"1em\"\n    }}>\n  <TimelineOfContents timeline={[{\n        linkTo: \"#dotnet-platform-overview\",\n        title: \"Огляд .NET платформи\"\n      }, {\n        linkTo: \"#dotnet-under-the-hood\",\n        title: \".NET під катопом\"\n      }, {\n        linkTo: \"#csharp-essential-topics\",\n        title: \"Найважливіші поняття C#\"\n      }, {\n        linkTo: \"#clean-code-principles\",\n        title: \"Принципи чистого коду\"\n      }]} mdxType=\"TimelineOfContents\" />\n    </div>\n    <Level id=\"dotnet-platform-overview\" number=\"1\" name=\"Огляд .NET платформи\" difficulty={<span><a href=\"https://www.urbandictionary.com/define.php?term=easy%20peasy%20lemon%20squeezy\">Easy peasy lemon squeezy</a>.</span>} objectives={<span>Почитати/послухати про платформу .NET в загальному <em>(довго не буде)</em>.</span>} labels={{\n      level: \"Розділ\",\n      backToTop: \"нагору\",\n      difficulty: \"Складність:\",\n      objectives: \"Мета:\"\n    }} mdxType=\"Level\" />\n    <p style={{\n      \"marginLeft\": \"0.25em\"\n    }}>Зараз компанія Microsoft вкладає досить багато ресурсів у розвиток .NET та їхньої хмарної платформи — Azure <em>(Ажур, Ежур, Ейжа)</em> та найбільше контрибьютить в open source. \nІнфраструктура .NET стрімко росте та розвивається, постійно створюютсья нові інструменти для роботи з нею, додаються інтеграції з іншими сервісами.\n    </p>\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-1\">\n      <h5>\n        Платформа <strong>.NET</strong> зараз\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={dotnetPlatform} alt=\"dotnet-platform\" />\n      <div className=\"columns text-center\" style={{\n            \"display\": \"none\"\n          }}>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Framework</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-2\">WPF</div>\n                <div className=\"column col-7\">Windows Forms</div>\n                <div className=\"column col-3\">ASP.NET</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Core</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">UWP</div>\n                <div className=\"column col-6\">ASP.NET Core</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Xamarin</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">iOS</div>\n                <div className=\"column col-6\">Android</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Standard Library</strong>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Common infrastructure</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-4\">Compilers</div>\n                <div className=\"column col-4\">Languages</div>\n                <div className=\"column col-4\">Runtime components</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p>Шляхи створення .NET-додатків:</p>\n      <ol>\n        <li><strong>.NET Framework</strong> — розробка під Windows настільних додатків на <strong>Windows Forms</strong>, <strong>WPF</strong>, веб-серверів на <strong>ASP.NET</strong> та <strong>WCF</strong></li>\n        <li><strong>.NET Core</strong> — розробка кросплатформних веб-додатків за допомогою <strong>ASP.NET Core</strong>, створення гібридних додатків з допомогою <strong>Universal Windows Platform</strong>, яка дозволяє запускати програму написану на цій технології на Windows-машині, Xbox, Hololens</li>\n        <li><strong>Xamarin</strong> — платформа для створення мобільних додатків для <strong>iOS</strong> i <strong>Android</strong>, використовуючи C#, XML та XAML</li>\n      </ol>\n      <p>Код, який написаний під спеціальний фреймворк, як WPF, ASP.NET Core чи Android, не можна перевикористати на іншій платформі, тому що він заточений для роботи з так званими <em>platform-specific API</em>, який відрізняється у них всіх. Щоб можна було повторно використовувати код бізнес-логіки, хелпер-методів, моделей, класів і так далі було створено <strong>.NET Standart</strong>, який надає набір доступних АPI, які однаково працюють у всіх десктопних програмах, веб-серверах, мобільних додатках, іграх та хмарних службах незалежно від операційної системи і платформи.</p>p\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-2\">\n      <h5>\n        Платформа <strong>.NET 6</strong>\n      </h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={dotnet6Platform} alt=\"dotnet5-platform\" className=\"top-image\" />\n       <p>\n       З листопада 2021 року випущено <strong>.NET 6</strong>. Що стало серйозним вдосконаленням системи розробки в цілому.\n         Головним нововведенням стала підтримка <strong>Linux</strong>, <strong>macOS</strong>, <strong>iOS</strong>, <strong>Android</strong>, <strong>tvOS</strong>, <strong>watchOS</strong> і <strong>WebAssembly</strong>.\n         В результаті стало можливим створювати додатки для різних платформ на загальній базі коду з однаковим процесом збирання, незалежно від типу додатка. Тож тепер ви можете розробляти за допомогою <strong>Visual Studio</strong>, <strong>Visual Studio для Mac</strong>, <strong>Visual Studio Code</strong> або будь-якої іншої IDE за допомогою <strong>dotnet CLI</strong>\n        </p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-3\">\n      <h5><strong>NuGet</strong></h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={nugetLogo} alt=\"nuget-logo\" className=\"top-image\" />\n      <p>Кожному програмісту рано чи пізно гарантовано потрібно імплементовувати функціонал, який частково або повністю хтось раніше вже створив і навіть опублікував (як правило у вигляді <i>DLL бібліотеки</i>). Розробники називають такі модулі \"пакетами\", в які складено скомпільований код, додаткові файли-ассети та маніфест, що пояснює мету та спосіб використання пакету. У більшості мов програмування є власні платформи для обміну такими корисними модулями, у .NET це <strong>NuGet</strong>, пітримуваний Microsoft-ом. Розробники, які створили крутий інструмент чи, наприклад, бібліотеку для роботи з файловою системою, мають можливість опублікувати свою роботу як <strong>NuGet-пакет</strong> в вигляді <em>zip-файлу</em> з розширенням <strong>.nupkg</strong>. Ви можете шукати та скачувати модулі, які пришвидшать розробку вашого додатку, з центрального репозиторію <strong>NuGet Gallery</strong> ― він налічує вже близько 100000 унікальних пакетів і там може знайтись щось корисне.</p>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"dotnet-under-the-hood\" number=\"2\" name=\".NET під капотом\" difficulty={<span style={{\n      color: \"orangered\",\n      fontWeight: \"bold\"\n    }}>Hard as hell 🔥</span>} objectives=\"Зрозуміти SDK.\" labels={{\n      level: \"Розділ\",\n      backToTop: \"нагору\",\n      difficulty: \"Складність:\",\n      objectives: \"Мета:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-1\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0.25em\"\n            }}><strong>CLR</strong></span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Common Language Runtime\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Сьогодні у .NET-світі найпоширеніші мови програмування — це <strong>C#</strong>, <strong>F#</strong> та <strong>Visual Basic</strong>.\n      У кожної є свій компілятор, який перетворює код написаний на цій мові у <strong>Intermediate Language Code (IL)</strong>, який представляє з себе набір інструкцій для віртуальної машини .NET — <strong>CLR (Common Language Runtime)</strong>.</p>\n      <p>Основні етапи виконання програми .NET:</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-2-1-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-2-1-1\">\n            Спочатку написаний нами код компілятор перетворить з C# у IL:\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                Звичайний C# код\n                <div>\n                  <SnippetL02S01 mdxType=\"SnippetL02S01\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                C# код, скомпільований в IL\n                <div>\n                  <SnippetL02S02 mdxType=\"SnippetL02S02\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </li>\n        <li>Тоді, коли прийде час для виконання частини нашого коду в програмі, CLR за допомогою <strong>JIT (Just in Time)</strong> компілятора перетворить код IL на машинний код.</li>\n      </ul>\n      <p>Результатом білду .NET-програми є файл з розширенням <strong>.exe</strong> (Executable) або <strong>.dll</strong> (Dynamic Link Library).</p>\n      <div className=\"bubble small subtle\">\n        <p>Важливо зазначити, що при перетворенні IL в машинний код буде перетворена тільки та частина коду, яка має виконатись в теперішній момент часу.</p>\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-2\">\n      <h5><strong>Value</strong> and <strong>Reference</strong> types</h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>На найвищому рівні у С# є 2 типи даних — <strong>це значимі типи (value types)</strong> і <strong>ссилочні типи (reference types)</strong>. Важливо розуміти відмінності між ними:</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          Значимі типи:\n          <ul>\n            <li>Цiлочисленні типи</li>\n            <li>Типи з плаваючою крапкою</li>\n            <li>decimal</li>\n            <li>bool</li>\n            <li>enum-и</li>\n            <li>структури</li>\n          </ul>\n        </div>\n        <div className=\"column col-6\">\n          Ссилочні типи:\n          <ul>\n            <li>тип object</li>\n            <li>string</li>\n            <li>класи</li>\n            <li>інтерфейси</li>\n            <li>делегати</li>\n          </ul>\n        </div>\n      </div>\n      <p>Значимі типи зберігаються у стеку, ссилочні на кучі. <strong>Value types</strong> передаються по значенню, тобто копіюються, <strong>reference types</strong> передаються за посиланням.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-3\">\n      <h5><strong>Stack</strong> and <strong>Heap</strong></h5>\n    </label>\n    <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={stackAndHeap} alt=\"stack-and-heap\" className=\"top-image\" />\n      <p>У <strong>.NET</strong> пам'ять ділиться на два типи: <strong>стек</strong> і <strong>кучу</strong>.\n      <strong> Стек</strong> являє собою структуру даних, яка росте знизу вгору: кожен новий елемент розміщується поверх попереднього.\n      У стеку зберігаються <em>значимі типи</em> та <em>посилання на ссилочні типи</em>, які, у свою чергу розміщуються на кучі.</p>\n      <p><strong>Кучу</strong> можна уявити як невпорядкований набір різнорідних об'єктів.\n      При створенні об'єкту <em>ссилочного типу</em> в стек додається посилання на адресу цього об'єкту у <strong>кучі</strong>.\n      Коли об'єкт <em>cсилочного типу</em> перестає використовуватися, то посилання з стеку видаляється, і пам'ять звільняється.</p>\n      <p>У .NET-і очищення пам'яті відбувається автоматично. За це відповідає <strong>Garbage Collector</strong> (по нашому — сміттєзборщик). Коли він бачить, що на об'єкт в кучі більше немає посилань, він видаляє цей об'єкт та очищує пам'ять.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-4\">\n      <h5><strong><code>ref</code></strong> and <strong><code>out</code></strong> parameters</h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Важливий момент у тому, як змінні <em>значимих</em> та <em>ссилочних типів</em> передаються у метод.</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          <h3>Value Type</h3>\n          <div>\n            <SnippetL02S03 mdxType=\"SnippetL02S03\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Reference Type</h3>\n          <div>\n            <SnippetL02S06 mdxType=\"SnippetL02S06\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Ref</h3>\n          <div>\n            <SnippetL02S04 mdxType=\"SnippetL02S04\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h3>Out</h3>\n          <div>\n            <SnippetL02S05 mdxType=\"SnippetL02S05\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-5\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-5\">\n      <h5><strong>Boxing</strong> / <strong>Unboxing</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Операція упаковки — <strong>boxing</strong> — це виділення пам'яті на кучі під об'єкт значимого типу — value type, і присвоєння ссилки на цю ділянку пам'яті змінній в стеці. Розпакування — <strong>unboxing</strong>, навпаки, виділяє пам'ять в стеку під об'єкт, отриманий з кучі по ссилці.</p>\n      <div className=\"paralell-blocks\">\n        <SnippetL02S07 mdxType=\"SnippetL02S07\" />\n        <img src={boxingUnboxing} alt=\"boxing-unboxing\" />\n      </div>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"csharp-essential-topics\" number=\"3\" name=\"Найважливіші теми C#\" difficulty=\"Ну таке собі.\" objectives=\"Зрозуміти SDK.\" labels={{\n      level: \"Розділ\",\n      backToTop: \"нагору\",\n      difficulty: \"Складність:\",\n      objectives: \"Мета:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-1\">\n      <h5><strong>Class vs Struct</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Структури</strong> по вигляду дуже схожі на <strong>Класи</strong>, але існує принципова відмінність, яка згадувалась раніше. <span style={{\n              \"textDecoration\": \"underline\"\n            }}>Клас</span> — це <strong>reference type</strong> і передається по ссилці, а <span style={{\n              \"textDecoration\": \"underline\"\n            }}>структура</span> — <strong>value type</strong> і передається за значенням — тобто копіюється.</p>\n      <p><em>Структури</em> краще використовувати для невеликих класів, маленьких структур даних та неважких об'єктів. <em>Класи</em> ж можна використовувати у всіх випадках, де вам незручно використовувати структуру. Вони чудово підходять для того щоб бути частиною ієрархії сутностей, мати внутрішній стан та містити в собі велику кількість бізнес логіки.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-2\">\n      <h5><strong>Static members</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Класи та структури можуть мати <em>статичні поля</em>, <em>методи</em> та <em>властивості</em>. Якщо член статичний, то він відноситься до усього класу чи структури і для звернення до нього не потрібно створювати екземпляр.</p>\n      <SnippetL03S01 mdxType=\"SnippetL03S01\" />\n      <p>На прикладі показано, що <em>статичне поле</em> є спільним для усіх об'єктів класу і може використовуватись у <em>нестатичних методах</em>. В той же час у <em>статичних методах</em> у нас немає доступу до <em>нестатичних членів</em> класу.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-3\">\n      <h5><strong>Params</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Використовуючи ключове слово <code>params</code> ми можемо \"сказати\" що наш метод приймає невизначену кількість параметрів — це може бути нуль або більше, будь-яка кількість.</p>\n      <SnippetL03S02 mdxType=\"SnippetL03S02\" />\n      <p>Коли метод має змінну кількість параметрів, ми передаємо аргументи йому просто перераховуючи їх через кому, як показано на прикладі. Варто зазначити, що аргумент <code>params</code> повинен бути вказаним останнім, після переліку усіх строго визначених аргументів методу.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-5\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-5\">\n      <h5><strong>Interface vs Abstract Class</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>У C# <em>абстракція</em> використовується для приховання деталей реалізації. \n      Це означає, що ми зосереджуємось на тому, що об'єкт може робити, а не на тому, як він це робить. Це часто використовується у написанні великих і складних програм. \n      Основні інструменти для цього — <em>абстрактні класи</em> та <em>інтерфейси</em>.</p>\n      <p>У <em>абстрактном класі</em> ми можемо <strong>створити функціонал, який реалізується у похідному від нього класі</strong>. \n      Зi свого боку <em>інтерфейс</em> дозволяє <strong>визначити функціональні можливості або функції, але не може їх реалізувати</strong>.</p>\n      <p>Клас імплементує інтерфейс та обов'язково реалізує ці методи.\n      Розглянемо кілька ключових відмінностей між ними:</p>\n      <ol>\n        <li>\n          <em>Інтерфейс</em> не може мати модифікаторів доступу до членів — все що є в <em>інтерфейсі</em> по дефолту є публічним. У абстрактного класу все залишається як і у звичайного класу.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S03 mdxType=\"SnippetL03S03\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S04 mdxType=\"SnippetL03S04\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          В <em>Інтерфейсі</em> ми можемо лише описати сигнатуру методу без його імплементації. А у <em>абстрактному класі</em> можуть знаходитися як абстрактні методи та властивості, так і не абстрактні — з повною або частковою реалізацією.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S05 mdxType=\"SnippetL03S05\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S06 mdxType=\"SnippetL03S06\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          Ми не можемо оголосити конструктор у тілі <em>інтерфейсу</em> ні з модифікатором доступу, ні без нього. У <em>абстрактному класі</em> ми можемо оголошувати конструктори з тими самими правилами, що і у звичайних класах. Він здебільшого використовується для виклику у конструкторі <em>похідного класу</em>, щоб не дублювати код ініціалізації полів чи властивостей <em>абстрактного класу</em>.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S07 mdxType=\"SnippetL03S07\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S08 mdxType=\"SnippetL03S08\" />\n            </div>\n          </div>\n        </li>\n        <li>\n          Ми не можемо явно створити інстанс <em>інтерфейсу</em> чи <em>абстрактного класу</em> викликавши конструкор. Хоча нагадаю, що у <em>абстрактного класу</em> він може бути.\n          <SnippetL03S09 mdxType=\"SnippetL03S09\" />\n        </li>\n        <li>\n          <em>Абстрактний клас</em> може містити поля і властивості, <em>інтерфейс</em> — лише властивості.\n          <div className=\"columns\">\n            <div className=\"column col-6\">\n              <SnippetL03S10 mdxType=\"SnippetL03S10\" />\n            </div>\n            <div className=\"column col-6\">\n              <SnippetL03S11 mdxType=\"SnippetL03S11\" />\n            </div>\n          </div>\n        </li>\n      </ol>\n      <h6>What, why and where?</h6>\n      <p><strong>Інтерфейс</strong> ми використовуємо щоб описати <strong>API</strong> для кількох класів, які, швидше за все, будуть імплементувати більше одного інтерфейсу. Треба пам'ятати, що члени інтерфейсу не можуть бути статичними. <em>С#</em>, на відміну від <em>С++</em>, не підтримує множинне наслідування, тому щоб його реалізувати, ми використовуємо інтерфейси.</p>\n      <p><strong>Абстрактний клас</strong> використовується, якщо ми хочемо його включити в ієрархію успадкувань і створити функціонал з повною або частковою реалізацією, яку клас-наслідник може імплементувати або перевизначити. <em>Абстрактний клас</em> надає можливість зберігати стан класу в цілому, а не окремого його об'єкту.</p>\n      <p><em>Інтерфейс</em> в основному використовується тоді, коли ми хочемо просто описати <strong>API</strong> використання класів, які будуть імплементувати цей інтерфейс ― задати поведінку.</p>\n    </div>\n  </li>\n   <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-IDisposable\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-IDisposable\">\n      <h5><strong>Інтерфейс IDisposable</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><code>IDisposable</code> оголошує єдиний метод <code>Dispose</code>, в якому при імплементації інтерфейсу в класі має відбуватися звільнення некерованих ресурсів, таких як з'єднання з базою данних, файлові дескриптори, мережеві підключення тощо. \n         Некеровані ресурси потрібно звільняти чим пошвидше, ще до видалення об'єкта з пам'яті коли до нього добереться <em>Garbage Collector</em>.\n         Наприклад, наш клас взаэмодіє з файловою системою ― відкриває файл, читає щось з нього, записує. І краще, чим раніше закінчити роботу із цим файлом, щоб інші програми чи потоки могли його використовувати.\n         І ще така річ, нам самим потрібно явно викликати цей метод <code>Dispose</code>, тому що <em>Garbage Collector</em> нічо про нього не знає. Це найкраще робити у блоці <code>try...finally</code>, щоб навіть якщо виникне помилка ми змогли звільнити ресурси та правильно очистити пам'ять.\n      </p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-IDisposable-example\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-IDisposable-example\">\n            Приклад імплементації IDisposable\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S31 mdxType=\"SnippetL03S31\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-7\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-7\">\n      <h5><strong>Extension methods</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><em>Extension методи</em> дозволяють \"додавати\" методи до існуючих типів без створення нового похідного типу, перекомпіляції або модифікації оригінального типу.\n      <em>Extension метод</em> це особливий <em>статичний метод</em>, який має обов'язково бути членом статичного класу.</p>\n      <SnippetL03S14 mdxType=\"SnippetL03S14\" />\n      <p>На прикладі показано <em>Extension метод</em> для типу <code>String</code>. <em>Статичний клас</em> може мати довільну назву, в той час як назва методу має відрізнятись від уже існуючих методів у класі, який ми розширюємо, або мати іншу сигнатуру.\n      Надалі ми можемо використовувати оголошений нами метод так само як і звичайні методи класу, який ми розширюємо.</p>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-8\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-8\">\n      <h5><strong>Generics</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Дженеріки</strong> з'явилися з <strong>C# 2.0</strong>. Вони принесли в <strong>.NET</strong> концепт <em>типізованих параметрів</em> ― це дозволяє проектувати класи та методи, які визначають тип членів класу чи методу тільки тоді, коли вони ініціалізовані тим, хто їх використовує.</p>\n      <p>Наприклад, використовуючи загальний параметр типу <code>Т</code>, ми можемо написати єдиний клас, який може використовуватись клієнтським кодом без ризику здійснення <em>boxing-операцій</em> (які  самі по собі є важкими операціями і зловживати ними не є добре).</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-example\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-example\">\n            Приклад оголошення <code>Generic</code> класу\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S15 mdxType=\"SnippetL03S15\" />\n            <p>Як видно з наведеного вище коду, <code>MyGenericClass</code> визначений з <code>&lt;T&gt;</code>. <code>&lt;T&gt;</code> вказує, що <code>MyGenericClass</code> є дженеріком, і тип <code>Т</code> буде визначено пізніше. Можете використовувати будь-які букви або слово замість <code>T</code>, це не має значення.</p>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-example-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-example-2\">\n            Приклад створення екземпляру <code>Generic</code> класу\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S16 mdxType=\"SnippetL03S16\" />\n            <p>Тепер компілятор призначає тип членів класу на основі типу, переданого програмістом при створенні класу. Наприклад, наступний код використовує тип даних <code>int</code>.</p> \n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-сonstraints\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-сonstraints\">\n            Обмеження у <code>Generic</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>У C# є <em>Constraint</em>-и для того щоб обмежити типи, які можна використовувати у дженерік класі. Наприклад, якщо через <em>Constraint</em> ми вказуємо що типом <code>Т</code> може бути тільки <em>reference type</em>, тобто класи, то ми не зможемо використати <em>value type</em> для створення екземпляру дженерік класу.\n            Відповідно після цього ми не можемо використовувати структурні типи, такі як <code>int</code> — це викличе помилку компіляції.</p>\n            <SnippetL03S17 mdxType=\"SnippetL03S17\" />\n          </div> \n        </li>\n         <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Generic-all-сonstraints\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Generic-all-сonstraints\">\n            Всі <code>Generic</code> обмеження\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>Тут зібрані усі можливі <em>Constraint</em>-и, якими можна обмежувати типи для використання в дженерік класах:</p>\n            <img src={constraintsTypes} alt=\"constraints-types\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-4\">\n      <h5><strong>Nullable</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Явно <em>структурному типу даних</em> ми не можемо присвоїти значення<code>null</code>. Щоб це зробити, нам потрібно оголосити змінну з модифікатором <code>?</code>. Цей модифікатор являється <em>аліасом</em> до структури <code>Nullable&lt;T&gt;</code></p>\n      <SnippetL03S18 mdxType=\"SnippetL03S18\" />\n      <p>Сигнатура <code>Nullable&lt;T&gt;</code>:</p>      \n      <SnippetL03S19 mdxType=\"SnippetL03S19\" />\n      <p>Коли ми обгортаємо змінну в <code>Nullable</code> тип, у нас з'являється новий <strong>АРІ</strong> для взаємодії з цією змінною:</p>\n      <ul>\n        <li>Властивіть <code>HasValue</code>, повертає <code>true</code>, якщо змінна містить значення, або <code>false</code>, якщо вона <code>null</code></li>\n        <SnippetL03S20 mdxType=\"SnippetL03S20\" />\n        <li><code>Value</code> повертає реальне значення, яке зберігається у змінній, якщо <code>HasValue</code> дорівнює <code>true</code>. В іншому випаку <code>Value</code> викидає <code>InvalidOperationException</code>, якщо змінна <code>null</code>.</li>\n      </ul>  \n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-10\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-10\">\n      <h5><strong>Events & Delegates + Lambdas</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Делегати</strong> — це об'єкти, які вказують на методи; за допомогою них ми можемо викликати методи, які ми присвоїли делегату. Делегати дозволяють представляти методи у вигляді об'єктів і передавати їх до функцій, використовувати як <em>колбеки</em>.</p>\n      <p><strong>Події</strong> — це об'єкти типу делегат, які повідомляють про це що сталась якась подія (відбувся <em>action</em>).</p>\n      <p><strong>Лямбда-вирази</strong> — представляють з себе спрощений запис <em>анонімних методів</em>. Це дозволяє створити лаконічні методи, які можуть повертати якесь значення.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Lambdas\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Lambdas\">\n            Синтаксис лямбда-виразів\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={lambdaExpressionStructure} alt=\"lambdaExpressionStructure\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Delegates\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Delegates\">\n            Приклад використання делегату\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S21 mdxType=\"SnippetL03S21\" />      \n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Action\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Action\">\n            <code>Action</code>, <code>Func</code> і <code>Predicate</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>Замість визначення нового типу делегата, можна використовувати уже визначені делегати <em>Action</em>, <em>Func</em> і <em>Predicate</em>.</p>\n            <ul>\n                <li>Дженерік делегат <em>Action &lt;T&gt;</em> призначений для посилання на метод, що повертає <code>void</code>. Класу цього делегата можна передавати до 16 параметрів довільного типу.\n                <SnippetL03S22 mdxType=\"SnippetL03S22\" />\n                </li>\n                <li>Делегати <em>Func</em> можуть використовуватися аналогічним чином. Func дозволяє викликати методи, які щось повертають. Йому так само можна передавати до 16 типів параметрів і 1 тип, який він повертає.\n                <SnippetL03S23 mdxType=\"SnippetL03S23\" />\n                </li>\n                <li>Делегат <em>Predicate</em> використовується для порівняння відповідності деякого об'єкта <em>T</em> певній умові. Він повертає <code>true</code>, якщо об'єкт задовільняє умову, і <code>false</code>, якщо ні.\n                <SnippetL03S24 mdxType=\"SnippetL03S24\" />\n                </li>\n            </ul>\n          </div> \n        </li>\n         <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Events\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Events\">\n            Events & Delegates Flow\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={delegateEventFlow} alt=\"delegateEventFlow\" />\n            <p><strong>Події</strong> дозволяють сигналізують системі про те, що відбулося певна дія.</p>\n            <p>Існує така модель: <strong>Publisher-Subscriber</strong><em>(Видавець-Підписник)</em>. <em>Підписник</em> підписується на подію, визначає обробник і чекає допоки <em>Видавець</em> виконає цю подію, щоб його викликати.</p>       \n            <p>Приклад використання подій та делегатів ви зможете знайти <a href=\"https://github.com/binary-studio-academy/stage-2-dotnet-ecosystem-and-csharp-best-practices\"><strong>тут</strong></a>.</p>\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-11\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-11\">\n      <h5><strong>Collections</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>В C# є <em>масиви</em>, які зберігають в собі <em>набори однотипних об'єктів</em>, але працювати з ними не завжди зручно. Так як масив зберігає <em>фіксовану кількість об'єктів</em>, в випадках коли ми заздалегідь не знаємо, скільки у нас їх буде, набагато зручніше буде застосовувати <em>колекції</em>.</p>\n      <p>При виборі колекцій визначальну роль може зіграти те, що деякі з них реалізовують стандартні структури даних, такі як</p>\n      <ul>\n          <li>стек</li>\n          <li>чергa</li>\n          <li>словник</li>\n          <li>хеш-таблиця</li>\n      </ul>\n      <p>...які можуть стати в нагоді для вирішення різних спеціальних завдань. Основою для створення всіх колекцій є реалізація інтерфейсів <code>IEnumerator</code> і <code>IEnumerable</code>.</p>\n      <p>Інтерфейс <code>IEnumerator</code> представляє <em>Перераховувач (Перечислитель)</em>, який уможливлює послідовний перебір колекції, наприклад в циклі <code>foreach</code>, або засобами <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">LINQ</a>. А інтерфейс <code>IEnumerable</code> через свій метод <code>GetEnumerator</code> надає Перераховувач всім класам, які реалізують даний інтерфейс. Тому інтерфейс <code>IEnumerable</code> є базовим для усіх колекцій.</p>\n      <p>Конкретні методи і способи використання можуть відрізнятися від одного класу колекції до іншого, але загальні принципи будуть одні і ті ж для всіх класів колекцій.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Collections-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Collections-Hierarchy\">\n            Collections Hierarchy\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={collectionsHierarchy} alt=\"collectionsHierarchy\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-ArrayList\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-ArrayList\">\n            ArrayList & List\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>У наведеному прикладі використовуються дві колекції: <strong>non-generic</strong> — <code>ArrayList</code>, та <strong>generic</strong> — <code>List</code>. Зараз хорошою практикою вважається використовувати дженерік версії колекцій всюди, де це тільки можливо — через строгу типізацію та зручність у використанні. Більшість колекцій підтримують додавання елементів.</p> \n            <SnippetL03S25 mdxType=\"SnippetL03S25\" />\n            <p>Наприклад, в даному випадку додавання проводиться методом <code>Add</code>, але для інших колекцій назва методу може відрізнятися. Також більшість колекцій реалізують видалення (в даному прикладі проводиться за допомогою методу <code>RemoveAt</code>, що видаляє елемент з колекції за індексом елементу). За допомогою властивості <code>Count</code> можна подивитися кількість елементів у колекції.</p>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Stack\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Stack\">\n            Stack\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>Stack&lt;T&gt;</code> представляє колекцію, яка використовує алгоритм <strong>LIFO</strong> — last in — first out — (\"останній прийшов — першим вийшов\"). При такій організації даних кожен наступний доданий елемент поміщається поверх попереднього. Діставання елементів з колекції відбувається в зворотному порядку — витягується той елемент, який знаходиться вище всіх у стеці.</p> \n            <img src={stack} alt=\"stack\" />\n            <p>У класі <code>Stack</code> можна виділити два основні методи, які дозволяють керувати елементами — це:</p>\n            <ul>\n              <li><code>Push</code>: додає елемент в стек на перше місце</li>\n              <li><code>Pop</code>: дістає перший елемент з стеку</li>\n              <li><code>Peek</code>:* просто повертає перший елемент з стеку без його видалення</li>\n            </ul>\n            <SnippetL03S32 mdxType=\"SnippetL03S32\" />\n            <div className=\"bubble medium subtle\">На прикладі можна побачити як ми створюємо екземпляр коленції стеку стрічок. Добавляємо 3 міста — \"Lviv\", \"Kyiv\", \"Odessa\" за допомогою методу <code>Push</code>. Витягуємо елемент який ми додали останнім за допомогою методу <code>Pop</code> та виводимо результати на екран.</div>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Dictionary\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Dictionary\">\n            Dictionary\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>Dictionary</code> <em>(словник)</em> зберігає об'єкти, які представляють пару ключ-значення. Його дуже зручно використовувати для того щоб огранізувати відповідність чогось чомусь.</p> \n            <p>Кожен такий об'єкт є екземпляр структури <code>KeyValuePair&lt;TKey, TValue&gt;</code>. Завдяки властивостям <code>Key</code> і <code>Value</code>, які є у цієї структури, ми можемо отримати ключ і значення елемента в словнику.</p>\n            <SnippetL03S26 mdxType=\"SnippetL03S26\" />\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-9\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-9\">\n      <h5><strong>Tuples</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Якщо вам потрібно склеїти два значення, щоб повернути їх з функції або помістити два значення в <em>хеш-набір</em>, ви можете використовувати типи <code>System.ValueTuple</code></p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Tuples-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Tuples-1\">\n            Приклад використання кортежу\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S27 mdxType=\"SnippetL03S27\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Tuples-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Tuples-2\">\n            Різні use-cases використання кортежів\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S28 mdxType=\"SnippetL03S28\" />\n            <ol>\n              <li>Створення кортежу</li>\n              <li>Використання кортежу для типізування <code>Dictionary</code></li>\n              <li>Додавання елементів кортежу у <code>Dictionary</code></li>\n              <li>Повернення значення словника по ключу</li>\n              <li>Деструктуризація елементу кортежу</li>\n              <li>Доступ до членів кортежу по імені</li>\n            </ol>\n          </div> \n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-12\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-12\">\n      <h5><strong>Exceptions</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Іноді при виконанні програми виникають помилки, які важко або неможливо передбачити (наприклад, при передачі файлу по мережі може обірватися підключення і інтернет пропаде). Такі ситуації називаються <strong>Exception</strong>-ами. Мова C# надає розробникам можливості для обробки таких ситуацій засобами конструкції <code>try...catch...finally</code></p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-try-catch-finally\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-try-catch-finally\">\n            Приклад використання <code>try...catch...finally</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <SnippetL03S29 mdxType=\"SnippetL03S29\" />\n            <ol>\n              <li>При використанні блоку <code>try...catch...finally</code> спочатку виконуються всі інструкції в блоці <code>try</code>.</li>\n              <li>Якщо в цьому блоці не виникло <em>Exception</em>-ів, то після нього виконається блок <code>finally</code> і конструкція <code>try..catch..finally</code> завершить свою роботу.</li>\n              <li>Якщо ж в блоці <code>try</code> виникає <em>Exception</em>, то звичайний потік виконання зупиняється і CLR починає шукати блок <code>catch</code>, який може обробити цей <em>Exception</em>.</li>\n              <li>Якщо блок <code>catch</code> знайдений, то він виконується, а після його завершення виконається блок <code>finally</code>.</li>\n              <li>Якщо потрібний блок <code>catch</code> не знайдений, то програма аварійно завершує своє виконання.</li>\n            </ol>\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exceptions-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exceptions-Hierarchy\">\n            <code>Exceptions</code> Hierarchy\n          </label>\n          <div className=\"details-body details-body-with-image\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>У C# всі типи <em>Exception</em>-ів наслідуються від батьківського класу <code>Exception</code>, який додатково поділяється на дві гілки <code>SystemException</code> і <code>ApplicationException</code>.</p>\n            <p><code>SystemException</code> — це базовий клас для всіх помилок <em>CLR</em> або програмного коду, таких як <code>DivideByZeroException</code> або <code>NullReferenceException</code> і так далі.</p>\n            <img src={exceptionClassHierarchy} alt=\"exceptionClassHierarchy\" className=\"bottom-image\" />\n          </div> \n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Application-Exception\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Application-Exception\">\n            <code>Application Exception</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>ApplicationException</code> використовується для виключень пов'язаних із додатком. Такий тип викключень дуже зручно використовувати для створення своїх кастомних <em>Exception</em>-ів. Для цього треба просто унаслідуватись від класу <code>Exception</code> і додати туда те що ви хочете. Далі в цьому класі можна визначати додаткої поля, властивості, методи і тд.</p>\n            <SnippetL03S30 mdxType=\"SnippetL03S30\" />\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exception-properties\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exception-properties\">\n            <code>Exception</code> properties\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <div className=\"sl-block is-focused\" data-block-type=\"text\">\n              <div className=\"sl-block-content\" data-placeholder-tag=\"p\" data-placeholder-text=\"Text\">\n                <table>\n                \t<tbody>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.data#System_Exception_Data\">Data</a></td>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary\">IDictionary</a>, що містить дані в парах ключ-значення.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink#System_Exception_HelpLink\">HelpLink</a></td>\n                \t\t\t<td>Може містити URL (або URN) до файлу справки, яка надає вичерпуючу інформацію про причину викиникення помилки.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.innerexception#System_Exception_InnerException\">InnerException</a></td>\n                \t\t\t<td>Ця властивість може використовуватися для створення та збереження ланцюга помилок під час обробки <em>Exception</em>-a. Ви можете використовувати його для створення нового виключення, яке містить попередні <em>Exception</em>-и.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.message#System_Exception_Message\">Message</a></td>\n                \t\t\t<td>Надає детальну інформацію про причину винятку.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.source#System_Exception_Source\">Source</a></td>\n                \t\t\t<td>Містить назву програми або об'єкту, у якому виникла помилка.</td>\n                \t\t</tr>\n                \t\t<tr>\n                \t\t\t<td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.stacktrace#System_Exception_StackTrace\">StackTrace</a></td>\n                \t\t\t<td>Містить <em>stack trace</em> який можна використати, щоб визначити де виникла помилка. <em>Stack trace</em> включає назву вихідного файлу та номер рядка програми, якщо доступна <em>debug інформація</em>.</td>\n                \t\t</tr>\n                \t</tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-throw\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-throw\">\n            <code>throw</code> it away!\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p>Після оператора <code>throw</code> вказується об'єкт <code>Exception</code>-a, в конструктор якого ми можемо передати повідомлення про помилку. Замість загального типу <em>Exception</em> ми можемо вказати  об'єкт будь-якого іншого типу <code>Exception</code>.</p>\n            <SnippetL03S33 mdxType=\"SnippetL03S33\" />\n            <p>Подібним чином ми можемо генерувати <code>Exception</code>-и в будь-якому місці програми. Але існує також і інша форма використання оператора <code>throw</code>, коли після цього оператора нічого не вказується.</p>\n            <SnippetL03S34 mdxType=\"SnippetL03S34\" />\n            <p>У подібному вигляді оператор throw може використовуватися тільки в блоці <code>catch</code>. Різниця між ними у тому, що <code>throw</code> без нічого зберігає початковий <code>stack trace</code>, у той час як <code>throw ех</code> скидує <code>stack trace</code> до методу, у якому зараз відбувається обробка <code>Exception</code>-у.</p>\n          </div>\n        </li>\n      </ul>\n      <p>Приклад обробки виняткових ситуацій ви зможете знайти <a href=\"https://github.com/binary-studio-academy/stage-2-dotnet-ecosystem-and-csharp-best-practices\"><strong>тут</strong></a>.</p>\n    </div>\n  </li>\n    </ul>\n    <Level id=\"clean-code-principles\" number=\"4\" name=\"Принципи чистого коду\" difficulty=\"Сім разів відмір, один раз відріж.\" objectives=\"Зрозуміти, як писати такий код, який хочеться читати.\" labels={{\n      level: \"Розділ\",\n      backToTop: \"нагору\",\n      difficulty: \"Складність:\",\n      objectives: \"Мета:\"\n    }} mdxType=\"Level\" />\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-1\">\n      <h5><strong>Coding Standards and <code>Naming Conventions</code></strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>В перекладі на людську мову — загальноприйняті стандарти написання коду та узгоджені правила, як називати змінні, функції і інше. Це — граматика і орфографія C#, прийнята більшістю .NET-розробників для того, щоб інші девелопери <em>(ви через Х часу)</em> могли легко та швидко зрозуміти, що відбувається у вашому коді та використовувати його, не плутаючись у всіх можливих способах назвати, скажімо, аргумент <em>(і такі правила написання є абсолютно у всіх мовах програмування, не тільки в С#)</em>. Довго розповідати про кожне з правил нема сенсу, головне для вас — самостійно ознайомитися з <a href=\"https://www.dofactory.com/reference/csharp-coding-standards\">списком більшості поширених стандартів C#</a>.</p>\n      <div className=\"bubble small subtle\">\n        Хочете бути цивілізованим розробником і мати повагу від колег — прочитайте кілька абзаців з прикладами правильно оформленого коду і дотримуйтеся такого формату, виконуючи таски малі чи великі.\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-2\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0.25em\"\n            }}>DRY</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          Don't Repeat Yourself\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p><strong>Не повторюйся</strong> при написанні коду = не прописуй кілька разів те, що можна закодити один раз, і викликати, звертаючись до конкретного модуля. Приклад — веб-додаток, що містить кілька однакових за оформленням блоків, і кожен з них має власний <em>(ідентичний іншим!)</em> опис стилів. Яка ймовірність, що коли потрібно буде внести однакову зміну в усіх цих блоках <em>(вручну, адже ми кілька разів повторюємо той самий набір стилів)</em>, розробник пропустить один чи кілька з них? Коли цей принцип порушено і імплементація методу чи навіть класу дублюється без справжньої потреби, а написано кілька сотень тисяч рядків коду (як на будь-якому реальному проекті), то щоб відрефакторити, змінити бізнес логіку чи внести прості зміни до інтерфейсу, доводиться довгенько шукати по імені методу нещасний кусок коду, часто для того, щоб поміняти у цьому лише 1 цифру.</p>\n      <div className=\"bubble small subtle\">\n        Кароч, так не робиться 😐. Щоб досягнути <strong>DRY</strong> у вашому коді — діліть ваш код на маленькі кусочки, бачите що частина логіки повторюється — одразу виносьте, компонуйте функції. Чому потрібен DRY? Чим менше коду, тим краще. Його легше підтримувати, менше часу йде на те, щоб у ньому розібратися і також зменшується кількість багів.\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-3\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0\"\n            }}><strong>KISS<sup>💋</sup></strong></span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Keep It Simple Stupid\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>Цей принцип говорить сам за себе ― простий і лаконічний код легше зрозуміти іншим розробникам і тобі, коли ти повернешся до нього за якийсь час. Він формулюється так — \"кожен метод повинен вирішувати лише одну маленьку проблему, а не мати багато різних засобів вжитку\". Якщо у методі багато умов, то розбийте їх на менші методи. Це буде легше читати, підтримувати і це також допоможе знайти помилки набагато швидше. Щоб продемонструвати <strong>KISS</strong>, найчастіше приводять приклад із визначенням дня тижня:</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          <h6><strong>Simple</strong></h6>\n          <div>\n            <SnippetL04S01 mdxType=\"SnippetL04S01\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h6><strong>Stupid</strong></h6>\n          <div>\n          <SnippetL04S02 mdxType=\"SnippetL04S02\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"bubble small subtle\">\n        На слайді показано два методи для вирішення цієї задачі:\n        <ol className=\"compact\">\n          <li>Перше рішення просте як двері ― простий <code>switch</code> з дефолтним <em>case</em>-ом у випадку якщо день не знайдено.</li>\n          <li>Другий метод теж робочий, але для того щоб його зрозуміти, потрібно довший час вчитуватися.</li>\n        </ol>\n        Такий код існує повсюди, але він дійсно незручний і виглядає непрофесійно, 99% програмістів вибрали б працювати з чимось схожим на перший варіант.\n      </div>\n      <div className=\"bubble small subtle\" style={{\n            \"marginTop\": \"10px\"\n          }}>\n        Щоб досягнути <strong>KISS</strong> ― старайтесь писати максимально простий код. Якщо бачите важку (нечитабельну) ділянку коду, пошукайте більш лаконічне вирішення тої ж самої задачі, і, відрефакторивши написане, ви здивуєтеся, що кусок на 200 рядків насправді не такий вже й необхідний!\n      </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-4\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"fontWeight\": \"900\",\n              \"marginRight\": \"0.25em\"\n            }}>SOLID</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Single responsibility, Open–closed, Liskov substitution, Interface segregation, Dependency inversion\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>SOLID — це <strong>5 принципів об'єктно-орієнтованого програмування</strong>, які описують архітектуру програмного забезпечення:</p>\n      <p>А якщо простіше, то це правила, дотримуючись яких ви будете писати легкий для розумііння, радегування чи повторного використання код.</p>\n      <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-1\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-1\">\n            <strong>Single responsibility</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип єдиної відповідальності. Він означає, що <strong>кожен клас чи структура повинні мати лише одне завдання або вирішувати лише одну таску</strong>. Всі члени класу пишуться для виконання даної для нього задачі, і в ньому не знаходиться жодна строчка коду, яка не відноситься до вказаної для цього блоку задачі. Якщо ми дотримуємося цього принципу, то ми визначаємо класи за їх задачами ще на етапі проектування програми.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">😢</span></h4>\n                <div>\n                  <SnippetL04S03 mdxType=\"SnippetL04S03\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">😎</span></h4>\n                <div>\n                  <SnippetL04S04 mdxType=\"SnippetL04S04\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              Я навів в приклад клас <code>Task</code> — він зберігає задачу в нашу базу даних і обчислює час, необхідний для вирішення задачі.<br />Робимо висновок, що він не відповідає принципу <strong>Single Responsibility Principle</strong>. Чому ми не хочемо, щоб він виконував і інші корисні функції, наприклад, визначав необхідний для виконання завдання час? Тому що якщо через деякий час у замовника поміняються параметри виконання задач <em>(наприклад, через реліз або зміни в чисельності команди програмістів)</em>, нам доведеться переписувати клас <code>Task</code> відповідно до змін у вхідних даних, і тестити чи не зламався при тому інший функціонал, який <code>Task</code> виконує. Згідно з <strong>Single Responsibility Principle</strong> ми маємо створити окремий клас для розрахунку часу на виконання завдань, який вже буде керуватися бізнес-логікою та іншими вхідними даними.\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-2\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-2\">\n            <strong>Open–closed</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип відкритості/закритості. Наш клас повинен бути <strong>відкритим для масштабування, але закритим для модифікацій</strong>. Наш модуль повинен бути розроблений так, щоб дописувався він тільки при створенні нових вимог ― але тих, що стосуються початкової задачі. «Закритий для модифікацій» означає, що клас вже повністю готовий і життєздатний, його задачі і призначення не міняються, отже ми не переписуємо його істотно, окрім як в випадку виправлення багів. У C# це досягаться через <strong>принцип успадкування</strong>.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">👎</span></h4>\n                <div>\n                  <SnippetL04S05 mdxType=\"SnippetL04S05\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">👍</span></h4>\n                <div>\n                <SnippetL04S06 mdxType=\"SnippetL04S06\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Розглянемо приклад з мокапом ― прототипом сторінки. Проблема даного класу в тому, що коли замовник захоче подивитись на створений дизайнерами мокап, але не зможе відкрити зображення формату <em>tiff</em> чи <em>cdr</em>, розробнику потрібно буде вносити новий формат картинки, наприклад <em>png</em>. Через це ми будем змушені додати нову умову <code>if</code>, що суперечить <strong>Open Closed Principle</strong>.</p>\n              <p>На другому прикладі показано як це можна вирішити ― є базовий абстрактний клас <code>Mockup</code>, який частково реалізовує конвертацію картинки, а дочірні класи реалізують конвертацію картинки в необхідний формат. І якщо ми захочемо добавити ще один формат, нам просто треба буде створити ще один клас, який буде наслідувати від <code>Mockup</code> і реалізовувати потрібний нам метод конвертації.</p>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-3\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-3\">\n            <strong>Liskov substitution</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>За принципом пiдстановки Лiсков ми повинні мати <strong>можливість використовувати будь-який дочірній клас замість батьківського</strong> таким же чином, не вносячи зміни. Дочірній клас не може порушувати визначення типу приведені у батькіському класі та суперечити його поведінці власним функціоналом.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">🤦‍♂️</span></h4>\n                <div>\n                  <SnippetL04S07 mdxType=\"SnippetL04S07\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">💁‍♂️</span></h4>\n                <div>\n                  <SnippetL04S08 mdxType=\"SnippetL04S08\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              От як це можна проілюструвати: <code>Developer</code> є батьківським класом для <code>JavaScriptDeveloper</code> i <code>CSharpDeveloper</code>. Наш клас <code>Developer</code> може створювати бекенд і фронтенд додатки. Здавалося б усе добре. <code>JavaScriptDeveloper</code> успішно реалізовує 2 методи. А от з <code>CSharpDeveloper</code> не все так просто, він може написати сервер на <em>ASP.NET</em>-і, але зовсім не може в фронтенд. І якщо ми спробуємо все ж таки отримати від нього фронтенд, то зловимо помилку ― exception. По-хорошому нам потрібно розділити функціонал <code>Developer</code> на 2 частини: <code>IFrontend</code> та <code>IBackend</code>, і реалізувати їх відповідно до призначення похідних класів: <code>JavaScriptDeveloper</code> у нас реалізовує і <code>IFrontend</code> і <code>IBackend</code>, а <code>CSharpDeveloper</code> тільки <code>IBackend</code>.\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-4\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-4\">\n            <strong>Interface segregation</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>Принцип розділення інтерфейсів говорить, що не треба пакувати разом всі інтерфейси підряд, треба їх <strong>розділяти за призначеннями</strong>, щоб користувачі могли вибірково імплементувати лише ті, які використовують, <em>а не всі підряд наявні в програмі</em>.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">💩</span></h4>\n                <div>\n                  <SnippetL04S09 mdxType=\"SnippetL04S09\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🎉</span></h4>\n                <div>\n                  <SnippetL04S10 mdxType=\"SnippetL04S10\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Давайте припустимо, що у нас є Інтерфейс <code>IDeveloper</code>, який тепер вміє створювати сервер і десктопний додаток. Як і до того, у нас є <code>JavaScriptDeveloper</code> та <code>CSharpDeveloper</code>, які можуть використати цей функціонал за призначенням. Для <em>JavaScript</em> додаток писався би під Electron, а на C# це був би WPF додаток. Все класно, всі задоволені, але ні, бо наш босс несподівано каже, що додатки на Electron в нього лагають і взагалі дорого платити цим JavaScript-розробникам. Ми урізаєм десктоп-проекти на JavaScript, пишем тепер тільки на WPF. І таким чином ми ломаємо принцип <strong>Interface Segregation</strong>, бо наш клас не може не виконувати свій функціонал, і виходить що JavaScript розробники все ще пишуть десктоп-проекти.</p>\n              <p>Рішенням цієї проблеми буде знову ж таки розділення інтерфейсу на кілька: <code>IDesktop</code> та <code>IBackend</code>. Це нагадує попередній приклад, але тут ми вирішуєм іншу проблему ― не даємо класу робити більше ніж потрібно.</p>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-5\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-5\">\n            <strong>Dependency inversion</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>І тепер останній і, мабуть, найважчий для розуміння принцип ― інверсія залежностей.</p>\n            <ol className=\"inverted\">\n              <li>Класи високого рівня не повинні залежати від класів низького рівня, при цьому обидва мають залежати від абстракцій.</li>\n              <li>Абстракції не повинні залежати від деталей, але деталі мають залежати від абстракцій.</li>\n            </ol>\n            <p>Що це значить? А це значить, що класи високого рівня реалізують бізнес-правила або логіку в системі. Низькорівневі класи займаються більш детальними операціями, як от роботою з базою даних, передачею повідомлень в операційну систему ― і так далі. Щоб досягти інверсії залежностей ми повинні тримати ці високорівневі і низькорівневі класи настільки слабозв'язаними наскільки можливо. І якраз для цього ми пишемо їх залежними від абстракцій, а не один від одного.</p>\n            <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Не SOLID\">😭</span></h4>\n                <div>\n                  <SnippetL04S11 mdxType=\"SnippetL04S11\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🤩</span></h4>\n                <div>\n                  <SnippetL04S12 mdxType=\"SnippetL04S12\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n              <p>Давайте розглянемо цей принцип на прикладі розсилки повідомлень. На першому зразку коду клас <code>Notification</code> повністю залежить від класу <code>Email</code>, тому що він відправляє тільки один тип повідомлень. Що якщо ми захочемо відправляти повідомлення якимсь іншим способом? Тоді нам треба буде копатися у всій системі повідомлень. Це є ознакою того що система є занадто тісно зв'язаною.</p>\n              <p>Щоб зробити її слабо зв'язаною в цьому випадку нам потрібно абстрагуватися від провайдера відправки повідомлень <code>Email</code>. Для цього ми створюємо інтерфейс <code>IMessenger</code> з методом <code>Send</code> і реалізуємо його у двох класах ― <code>Email</code> і <code>SMS</code>. Клас <code>Notification</code> ми складаємо так, щоб відв'язатись від конкретної реалізації розсилки повідомлень. В цьому випадку ми можемо використати принцип <strong>Dependency Injection</strong>, прокинувши об'єкт <code>Messenger</code> через конструктор. І в результаті ми відправлятимемо повідомлення того класу, з яким зараз працюємо. Якщо ми створюємо <code>Notification</code> з <code>Email</code> Messenger-ом, відправляєтья електронний лист. Далі ми захотіли змінити провайдера і присвоїли властивості <code>Messenger</code> класу <code>SMS</code>, тому наступний виклик методу <code>Notify</code> уже надішле <em>SMS</em>-ку.</p>\n            </div>\n          </div>\n        </li>\n      </ul>\n      <p>Кожен принцип <strong>SOLID</strong> пропонує нам шлях до написання логічного, надійного та зрозумілого коду, а мова С#, при дотриманні цих принципипів, дає змогу писати великі програми та легко розширювати їх.</p>\n    </div>\n  </li>\n    </ul>\n    <ThatsAllFolks mdxType=\"ThatsAllFolks\" />\n    <div className=\"bubble\">\n  Я можу довго говорити про C# та .NET, але в цій лекції поділився основним, на мою думку, для вас на даний момент. На тому все, дякую за увагу, ставте оцінку лекції в ваших особистих кабінетах, залишайте відгук, задавайте питання, робіть домашку і до зустрічі на код-рев'ю! 👋\n    </div>\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["metadata","orderId","author","title","description","keywords","duration","publishedAt","hiddenFromMainPage","_frontmatter","layoutProps","MDXLayout","Lecture","MDXContent","components","props","mdxType","currentLanguage","languages","src","frameBorder","allow","allowFullScreen","className","data","ivanHedz2023Avatar","role","href","style","id","timeline","linkTo","number","name","difficulty","objectives","labels","level","backToTop","type","htmlFor","dotnetPlatform","alt","dotnet6Platform","nugetLogo","color","fontWeight","stackAndHeap","boxingUnboxing","constraintsTypes","lambdaExpressionStructure","delegateEventFlow","collectionsHierarchy","stack","exceptionClassHierarchy","isMDXComponent"],"sourceRoot":""}