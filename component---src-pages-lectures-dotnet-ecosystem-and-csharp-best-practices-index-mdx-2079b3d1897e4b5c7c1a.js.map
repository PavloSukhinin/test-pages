{"version":3,"file":"component---src-pages-lectures-dotnet-ecosystem-and-csharp-best-practices-index-mdx-2079b3d1897e4b5c7c1a.js","mappings":"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","sources":["webpack://binary-studio-academy-2021-stage-2/./src/pages/lectures/dotnet-ecosystem-and-csharp-best-practices/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Lecture, SlackMessage, TimelineOfContents, Level, ThatsAllFolks, VideoWrapper, Language } from \"../../../components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFacebookSquare, faGithub, faLinkedin, faSkype } from \"@fortawesome/free-brands-svg-icons\";\nimport { ivanHedz2023Avatar } from \"../../../assets/images/avatars/intro-rounded\";\nimport aEtoMagazin from \"./assets/images/a-eto-magazin.png\";\nimport exceptionClassHierarchy from \"./assets/images/exception-class-hierarchy.jpg\";\nimport boxingUnboxing from \"./assets/images/boxing-unboxing.gif\";\nimport constraintsTypes from \"./assets/images/constraints-types.png\";\nimport nugetLogo from \"./assets/images/nuget-logo.png\";\nimport dotnetPlatform from \"./assets/images/dotnet-platform.jpg\";\nimport dotnet6Platform from \"./assets/images/net-6-ecosystem.png\";\nimport lambdaExpressionStructure from \"./assets/images/lambda-expression-structure.png\";\nimport delegateEventFlow from \"./assets/images/delegate-event-flow.png\";\nimport collectionsHierarchy from \"./assets/images/collections-hierarchy.jpg\";\nimport stack from \"./assets/images/stack.jpg\";\nimport stackAndHeap from \"./assets/images/stack-and-heap.gif\";\nimport SnippetL02S01 from \"./assets/snippets/snippet-l02-s01.mdx\";\nimport SnippetL02S02 from \"./assets/snippets/snippet-l02-s02.mdx\";\nimport SnippetL02S03 from \"./assets/snippets/snippet-l02-s03.mdx\";\nimport SnippetL02S04 from \"./assets/snippets/snippet-l02-s04.mdx\";\nimport SnippetL02S05 from \"./assets/snippets/snippet-l02-s05.mdx\";\nimport SnippetL02S06 from \"./assets/snippets/snippet-l02-s06.mdx\";\nimport SnippetL02S07 from \"./assets/snippets/snippet-l02-s07.mdx\";\nimport SnippetL03S01 from \"./assets/snippets/snippet-l03-s01.mdx\";\nimport SnippetL03S02 from \"./assets/snippets/snippet-l03-s02.mdx\";\nimport SnippetL03S03 from \"./assets/snippets/snippet-l03-s03.mdx\";\nimport SnippetL03S04 from \"./assets/snippets/snippet-l03-s04.mdx\";\nimport SnippetL03S05 from \"./assets/snippets/snippet-l03-s05.mdx\";\nimport SnippetL03S06 from \"./assets/snippets/snippet-l03-s06.mdx\";\nimport SnippetL03S07 from \"./assets/snippets/snippet-l03-s07.mdx\";\nimport SnippetL03S08 from \"./assets/snippets/snippet-l03-s08.mdx\";\nimport SnippetL03S09 from \"./assets/snippets/snippet-l03-s09.mdx\";\nimport SnippetL03S10 from \"./assets/snippets/snippet-l03-s10.mdx\";\nimport SnippetL03S11 from \"./assets/snippets/snippet-l03-s11.mdx\";\nimport SnippetL03S12 from \"./assets/snippets/snippet-l03-s12.mdx\";\nimport SnippetL03S13 from \"./assets/snippets/snippet-l03-s13.mdx\";\nimport SnippetL03S14 from \"./assets/snippets/snippet-l03-s14.mdx\";\nimport SnippetL03S15 from \"./assets/snippets/snippet-l03-s15.mdx\";\nimport SnippetL03S16 from \"./assets/snippets/snippet-l03-s16.mdx\";\nimport SnippetL03S17 from \"./assets/snippets/snippet-l03-s17.mdx\";\nimport SnippetL03S18 from \"./assets/snippets/snippet-l03-s18.mdx\";\nimport SnippetL03S19 from \"./assets/snippets/snippet-l03-s19.mdx\";\nimport SnippetL03S20 from \"./assets/snippets/snippet-l03-s20.mdx\";\nimport SnippetL03S21 from \"./assets/snippets/snippet-l03-s21.mdx\";\nimport SnippetL03S22 from \"./assets/snippets/snippet-l03-s22.mdx\";\nimport SnippetL03S23 from \"./assets/snippets/snippet-l03-s23.mdx\";\nimport SnippetL03S24 from \"./assets/snippets/snippet-l03-s24.mdx\";\nimport SnippetL03S25 from \"./assets/snippets/snippet-l03-s25.mdx\";\nimport SnippetL03S26 from \"./assets/snippets/snippet-l03-s26.mdx\";\nimport SnippetL03S27 from \"./assets/snippets/snippet-l03-s27.mdx\";\nimport SnippetL03S28 from \"./assets/snippets/snippet-l03-s28.mdx\";\nimport SnippetL03S29 from \"./assets/snippets/snippet-l03-s29.mdx\";\nimport SnippetL03S30 from \"./assets/snippets/snippet-l03-s30.mdx\";\nimport SnippetL03S31 from \"./assets/snippets/snippet-l03-s31.mdx\";\nimport SnippetL03S32 from \"./assets/snippets/snippet-l03-s32.mdx\";\nimport SnippetL03S33 from \"./assets/snippets/snippet-l03-s33.mdx\";\nimport SnippetL03S34 from \"./assets/snippets/snippet-l03-s34.mdx\";\nimport SnippetL04S01 from \"./assets/snippets/snippet-l04-s01.mdx\";\nimport SnippetL04S02 from \"./assets/snippets/snippet-l04-s02.mdx\";\nimport SnippetL04S03 from \"./assets/snippets/snippet-l04-s03.mdx\";\nimport SnippetL04S04 from \"./assets/snippets/snippet-l04-s04.mdx\";\nimport SnippetL04S05 from \"./assets/snippets/snippet-l04-s05.mdx\";\nimport SnippetL04S06 from \"./assets/snippets/snippet-l04-s06.mdx\";\nimport SnippetL04S07 from \"./assets/snippets/snippet-l04-s07.mdx\";\nimport SnippetL04S08 from \"./assets/snippets/snippet-l04-s08.mdx\";\nimport SnippetL04S09 from \"./assets/snippets/snippet-l04-s09.mdx\";\nimport SnippetL04S10 from \"./assets/snippets/snippet-l04-s10.mdx\";\nimport SnippetL04S11 from \"./assets/snippets/snippet-l04-s11.mdx\";\nimport SnippetL04S12 from \"./assets/snippets/snippet-l04-s12.mdx\";\nimport \"./styles.css\";\nexport const metadata = {\n  orderId: 4,\n  author: \"Ivan Hedz\",\n  title: \".NET ecosystem and C# best practices\",\n  description: \"Ivan makes an overview of <strong>.NET</strong> ecosystem, tell us deep insides about <strong>С#</strong> and to top it all off tells about clean code principals.\",\n  keywords: [\"dotnet\", \"ecosystem\"],\n  duration: \"35 min\",\n  publishedAt: \"2023-01-15T00:00:00\",\n  hiddenFromMainPage: true\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = Lecture;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div><h1><strong>.NET ecosystem and C# best practices</strong></h1></div>\n    <Language currentLanguage=\"en\" languages={{\n      \"en\": \"lectures/dotnet-ecosystem-and-csharp-best-practices\",\n      \"ua\": \"lectures/dotnet-ecosystem-and-csharp-best-practices/ua\"\n    }} mdxType=\"Language\" />\n    <VideoWrapper duration=\"35 min\" mdxType=\"VideoWrapper\">\n  <iframe src=\"https://youtu.be/qESDPe_Gj5Y\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </VideoWrapper>\n    <div>\n  <div className=\"author\">\n    <div className=\"avatar-wrapper\">\n      <object className=\"avatar-object\" data={ivanHedz2023Avatar} role=\"img\" aria-label=\"My profile picture\"></object>\n    </div>\n    <div className=\"profile\">\n      <h3 className=\"name\">Ivan Hedz</h3>\n      <p className=\"about\">\n        Ivan workes as Full Stack Web Developer in <a href=\"https://binary-studio.com\"><strong>Binary Studio</strong></a>. Tech stack is C# and Typescript. Hobbies – listening to music, arcade games and yoga. Decided to record a lecture for the Academy for the first time so that it would be easier for you to understand the .NET ecosystem.      </p>\n    </div>\n  </div>\n  <div className=\"bubble\" style={{\n        \"margin\": \"-0.5em 1em 1em\"\n      }}>\n    <strong className=\"dorov\">Hello!</strong>\n    <br />\n    The lecture about the .NET ecosystem and best practices for writing C# code will start in 5..4..3... But first, 🥁 some disclaimers about the lecture itself.\n    <ol className=\"compact inverted\">\n      <li>You have probably already heard (or not) about much of what will be discussed;</li>\n      <li>Some topics are talked about superficially, without going into details;</li>\n      <li>The lecture may seem long, but believe me is faster than diving into the MSDN documentation in search of the necessary information.</li>\n    </ol>\n    <p>You will also need a .NET developer starter pack: <a href=\"https://dotnet.microsoft.com/download\" title=\".NET\"><strong>.NET</strong></a>, <a href=\"https://git-scm.com/\" title=\"Git\"><strong>Git</strong></a>, <a href=\"https://visualstudio.microsoft.com/\" title=\"Visual Studio\"><strong>Visual Studio</strong></a> or <a href=\"https://www.jetbrains.com/rider/\" title=\"Rider\"><strong>Rider</strong></a>.\n    </p>\n  </div>\n    </div>\n    <div id=\"table-of-contents\" className=\"table-of-contents\" style={{\n      \"marginTop\": \"1em\"\n    }}>\n  <TimelineOfContents timeline={[{\n        linkTo: \"#dotnet-platform-overview\",\n        title: \"Review .NET platform\"\n      }, {\n        linkTo: \"#dotnet-under-the-hood\",\n        title: \".NET under the hood\"\n      }, {\n        linkTo: \"#csharp-essential-topics\",\n        title: \"The most important concepts C#\"\n      }, {\n        linkTo: \"#clean-code-principles\",\n        title: \"The principles of pure code\"\n      }]} mdxType=\"TimelineOfContents\" />\n    </div>\n    <Level id=\"dotnet-platform-overview\" number=\"1\" name=\"Overview of the .NET Platform\" difficulty={<span><a href=\"https://www.urbandictionary.com/define.php?term =easy%20peasy%20lemon%20squeezy\">Easy peasy lemon squeezy</a>.</span>} objectives={<span>Read/hear about the .NET platform in general <em>(Won't take long)</em>.</span>} labels={{\n      level: \"Section\",\n      backToTop: \"Top\",\n      difficulty: \"Difficulty:\",\n      objectives: \"Objective:\"\n    }} mdxType=\"Level\" />\n    <p style={{\n      \"marginLeft\": \"0.25em\"\n    }}> Microsoft is on top right now, have you heard about OpenAI company and their products like ChatGPT or DALL-E-2? Well it's 49% Microsoft 😎.\n  .Net ecosystem is also supported by that company, just imagine what would be the best ecosystem in the future.\n    </p>\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-1\">\n      <h5>\n        <strong>.NET</strong> Platform right now\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <img src={dotnetPlatform} alt=\"dotnet-platform\" />\n      <div className=\"columns text-center\" style={{\n            \"display\": \"none\"\n          }}>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Framework</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-2\">WPF</div>\n                <div className=\"column col-7\">Windows Forms</div>\n                <div className=\"column col-3\">ASP.NET</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Core</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">UWP</div>\n                <div className=\"column col-6\">ASP.NET Core</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-4\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Xamarin</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-6\">iOS</div>\n                <div className=\"column col-6\">Android</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>.NET Standard Library</strong>\n            </div>\n          </div>\n        </div>\n        <div className=\"column col-12\">\n          <div className=\"panel\">\n            <div className=\"panel-header\">\n              <strong>Common infrastructure</strong>\n            </div>\n            <div className=\"panel-body\">\n              <div className=\"columns\">\n                <div className=\"column col-4\">Compilers</div>\n                <div className=\"column col-4\">Languages</div>\n                <div className=\"column col-4\">Runtime components</div>\n              </div>\n            </div>\n          </div>\n        </div>\n          </div>\n       <p>Ways to create .NET applications:</p>\n       <ol>\n         <li><strong>.NET Framework</strong> - development of Windows desktop applications on <strong>Windows Forms</strong>, <strong>WPF</strong>, web servers on <strong>ASP.NET</strong> and <strong>WCF</strong></li>\n         <li><strong>.NET Core</strong> - Develop cross-platform web apps with <strong>ASP.NET Core</strong>, build hybrid apps with <strong>Universal Windows Platform</strong> which allows you to run a program written on this technology on a Windows machine, Xbox, Hololens</li>\n         <li><strong>Xamarin</strong> is a platform for building mobile apps for <strong>iOS</strong> and <strong>Android</strong> using C#, XML and XAML</li>\n       </ol>\n       <p>Code written for a specific framework such as WPF, ASP.NET Core, or Android cannot be reused on another platform because it is tailored to work with the so-called <em>platform-specific API</em>, which is different everyone has. So that you can reuse the code of business logic, helper methods, models, classes, etc. <strong>.NET Standard</strong> was created. It provides a set of available APIs that work in the same way in all desktop programs, web servers, mobile applications, games and cloud services, regardless of the operating system and platform.</p>\n     </div>\n   </li>\n   <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-1-2\" />\n     <label className=\"summary\" htmlFor=\"accordion-1-2\">\n       <h5>\n         <strong>.NET 6 platform</strong>\n       </h5>\n     </label>\n     <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <img src={dotnet6Platform} alt=\"dotnet5-platform\" className=\"top-image\" />\n       <p>\n        Since November 2021, <strong>.NET 6</strong> was released. Which became a serious improvement of the development system as a whole. \n        The main innovation was the provision of support for <strong>Linux</strong>, <strong>macOS</strong>, <strong>iOS</strong>, <strong>Android</strong>, <strong>tvOS</strong>, <strong>watchOS</strong> and <strong>WebAssembly</strong>.\n        As a result, it became possible to create applications for different platforms on a common code base with the same build process, regardless of the type of application. So now you can develop with the help of <strong>Visual Studio</strong>, <strong>Visual Studio for Mac</strong>, <strong>Visual Studio Code</strong> - or on any other IDE with help of <strong>dotnet CLI</strong>\n       </p>\n     </div>\n   </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-1-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-1-3\">\n      <h5><strong>NuGet</strong></h5>\n    </label>\n   <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <img src={nugetLogo} alt=\"nuget-logo\" className=\"top-image\" />\n       <p>Each programmer sooner or later has to implement functionality that someone has already created or even published in part or in full (usually in the form of an <i>DLL library</i>). Developers refer to such modules as \"packages\", which contain compiled code, additional asset files, and a manifest that explains the purpose and use of the package. Most programming languages have their own platforms for sharing such useful modules. In .NET, this is the <strong>NuGet</strong> supported by Microsoft. Developers who have created a cool tool or, for example, a library for working with the file system, can publish their work as a <strong>NuGet package</strong> in the form of an <em>zip file</em> with a <strong> extension. nupkg</strong>. You can search and download modules that will speed up the development of your application from the central <strong>NuGet Gallery</strong> repository - it already has about 250,000 unique packages and you might find something useful there.</p>\n     </div>\n  </li>\n    </ul>\n    <Level id=\"dotnet-under-the-hood\" number=\"2\" name=\".NET under the hood\" difficulty={<span style={{\n      color: \"orangered\",\n      fontWeight: \"bold\"\n    }}>Hard as hell 🔥</span>} objectives=\"Understand the SDK.\" labels={{\n      level: \"Section\",\n      backToTop: \"Top\",\n      difficulty: \"Difficulty:\",\n      objectives: \"Objective:\"\n    }} mdxType=\"Level\" />\n    <ul>\n   <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-2-1\" />\n     <label className=\"summary\" htmlFor=\"accordion-2-1\">\n       <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n         <span style={{\n              \"marginRight\": \"0.25em\"\n            }}><strong>CLR</strong></span>\n         <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n           Common Language Runtime\n         </small>\n       </h5>\n     </label>\n   <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>The most common programming languages in the .NET world today are <strong>C#</strong>, <strong>F#</strong>, and <strong>Visual Basic</strong>.\n       Each has its own compiler that converts code written in that language into <strong>Intermediate Language Code (IL)</strong>. The latter is a set of instructions for the .NET virtual machine - <strong>CLR (Common Language Runtime)</strong>.</p>\n       <p>Basic steps in running a .NET program:</p>\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-2-1-1\" />\n           <label className=\"summary\" htmlFor=\"accordion-2-1-1\">\n             First, the compiler will turn the written code from C# into IL:\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <div className=\"columns\">\n               <div className=\"column col-6\">\n                 Plain C# code\n                 <div>\n                   <SnippetL02S01 mdxType=\"SnippetL02S01\" />\n                 </div>\n               </div>\n               <div className=\"column col-6\">\n                 C# code compiled to IL\n                 <div>\n                   <SnippetL02S02 mdxType=\"SnippetL02S02\" />\n                 </div>\n               </div>\n             </div>\n           </div>\n         </li>\n         <li>And when it comes time to execute a piece of code in a program, the CLR will use the <strong>JIT (Just in Time)</strong> compiler to turn the IL code into machine code.</li>\n       </ul>\n       <p>The result of building a .NET program is a file with the extension <strong>.exe</strong> (Executable) or <strong>.dll</strong> (Dynamic Link Library).</p>\n       <div className=\"bubble small subtle\">\n         <p>It is important to note that when converting IL to native code, only the part of the code that should be executed at the current time will be converted.</p>\n       </div>\n     </div>\n  </li>\n <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-2-2\" />\n     <label className=\"summary\" htmlFor=\"accordion-2-2\">\n       <h5><strong>Value</strong> and <strong>Reference</strong> types</h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>At the highest level, there are 2 data types in C# - <strong>value types</strong> and <strong>reference types</strong>. It is important to understand the differences between them:</p>\n       <div className=\"columns\">\n         <div className=\"column col-6\">\n           Significant types:\n           <ul>\n             <li>Integer types</li>\n             <li>Floating point types</li>\n             <li>decimal</li>\n             <li>bool</li>\n             <li>enums</li>\n             <li>structs</li>\n           </ul>\n         </div>\n         <div className=\"column col-6\">\n           Reference types:\n           <ul>\n             <li>type object</li>\n             <li>string</li>\n             <li>classes</li>\n             <li>interfaces</li>\n             <li>delegates</li>\n           </ul>\n         </div>\n       </div>\n       <p>Value types are stored on the stack, reference types are stored on the heap. <strong>Value types</strong> are passed by value, i.e. copied, <strong>reference types</strong> are passed by reference.</p>\n     </div>\n   </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-3\">\n      <h5><strong>Stack</strong> and <strong>Heap</strong></h5>\n    </label>\n   <div className=\"details-body details-body-with-image\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <img src={stackAndHeap} alt=\"stack-and-heap\" className=\"top-image\" />\n       <p>In <strong>.NET</strong>, memory is divided into two types: <strong>stack</strong> and <strong>heap</strong>.\n       <strong> Stack</strong> is a data structure that grows from bottom to top: each new element is placed on top of the previous one.\n       The stack stores <em>value types</em> and <em>refs to reference types</em>, which in turn are stored on the heap.</p>\n       <p><strong>A heap</strong> can be thought of as an unordered collection of heterogeneous objects.\n       When an object of <em>reference type</em> is created, a reference to the address of this object in the <strong>heap</strong> is added to the stack.\n       When an <em>reference type object</em> is no longer used, the reference is removed from the stack and the memory is freed.</p>\n       <p>In .NET, memory cleanup happens automatically. The <strong>Garbage Collector</strong> is responsible for this (in our opinion, the garbage collector). When it sees that an object on the heap is no longer referenced, it removes that object and cleans up memory.</p>\n     </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-4\">\n      <h5><strong><code>ref</code></strong> and <strong><code>out</code></strong> parameters</h5>\n    </label>\n        <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>An important point is how the <em>value</em> and <em>reference type</em> variables are passed to the method.</p>\n       <div className=\"columns\">\n         <div className=\"column col-6\">\n           <h3>Value Type</h3>\n           <div>\n             <SnippetL02S03 mdxType=\"SnippetL02S03\" />\n           </div>\n         </div>\n         <div className=\"column col-6\">\n           <h3>Reference Type</h3>\n           <div>\n             <SnippetL02S06 mdxType=\"SnippetL02S06\" />\n           </div>\n         </div>\n         <div className=\"column col-6\">\n           <h3>ref</h3>\n           <div>\n             <SnippetL02S04 mdxType=\"SnippetL02S04\" />\n           </div>\n         </div>\n         <div className=\"column col-6\">\n           <h3>Out</h3>\n           <div>\n             <SnippetL02S05 mdxType=\"SnippetL02S05\" />\n           </div>\n         </div>\n       </div>\n     </div>\n  </li>\n      <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-2-5\" />\n     <label className=\"summary\" htmlFor=\"accordion-2-5\">\n       <h5><strong>Boxing</strong> / <strong>Unboxing</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>The boxing operation - <strong>boxing</strong> - is allocating memory on the heap for an object of a value type - value type, and assigning a reference to this memory area to a variable on the stack. Unboxing - <strong>unboxing</strong>, on the contrary, allocates memory on the stack for an object obtained from the heap by reference.</p>\n       <div className=\"parallel blocks\">\n         <SnippetL02S07 mdxType=\"SnippetL02S07\" />\n         <img src={boxingUnboxing} alt=\"boxing-unboxing\" />\n       </div>\n     </div>\n   </li>\n    </ul>\n    <Level id=\"csharp-essential-topics\" number=\"3\" name=\"Most Important C# Topics\" difficulty=\"Not bad.\" objectives=\"Understand the SDK.\" labels={{\n      level: \"Section\",\n      backToTop: \"top\",\n      difficulty: \"Difficulty:\",\n      objectives: \"Objective:\"\n    }} mdxType=\"Level\" />\n    <ul>\n   <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-1\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-1\">\n        <h5><strong>Class vs Struct</strong></h5>\n      </label>\n      <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n        <p><strong>Structures</strong> are very similar in appearance to <strong>Classes</strong>, but there is a fundamental difference that was mentioned earlier. <span style={{\n              \"textDecoration\": \"underline\"\n            }}>Class</span> is <strong>reference type</strong> and is passed by reference, while <span style={{\n              \"textDecoration\": \"underline\"\n            }}>structure</span> is <strong>value type</strong> and is passed by value — that is, copied.</p>\n        <p><em>Structures</em> are best used for small classes, small data structures, and lightweight objects. <em>Classes</em> can be used in all cases where it is inconvenient for you to use a structure. They are great for being part of an entity hierarchy, having internal state, and containing a lot of business logic.</p>\n      </div>\n    </li>\n    <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-2\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-2\">\n        <h5><strong>Static members</strong></h5>\n      </label>\n      <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n        <p>Classes and structures can have <em>static fields</em>, <em>methods</em> and <em>properties</em>. If a member is static, then it refers to the entire class or structure and does not need to be instantiated to refer to.</p>\n        <SnippetL03S01 mdxType=\"SnippetL03S01\" />\n        <p>The example shows that <em>static field</em> is common to all objects of the class and can be used in <em>non-static methods</em>. At the same time, in <em>static methods</em> we do not have access to <em>non-static members</em> of the class.</p>\n      </div>\n    </li>\n   <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-3\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-3\">\n       <h5><strong>Params</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>Using the keyword <code>params</code> we can \"say\" that our method takes an indefinite number of parameters - it can be zero or more, any number.</p>\n       <SnippetL03S02 mdxType=\"SnippetL03S02\" />\n       <p>When a method has a variable number of parameters, we pass arguments to it simply by listing them separated by commas, as shown in the example. It is worth noting that the <code>params</code> argument must be specified last, after the list of all strictly defined method arguments.</p>\n     </div>\n   </li>\n  <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-5\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-5\">\n       <h5><strong>Interface vs Abstract Class</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>In C#, <em>abstraction</em> is used to hide implementation details.\n       This means that we are focusing on what an object can do rather than how it does it. This is often used when writing large and complex programs.\n       The main tools for this are <em>abstract classes</em> and <em>interfaces</em>.</p>\n       <p>In an <em>abstract class</em>, we can <strong>create functionality that is implemented in a class inherited from it.</strong>.\n       For its part, an <em>interface</em> allows <strong>to define functionality or functions, but cannot implement them.</strong>.</p>\n       <p>A class implements an interface and must implement these methods.\n       Let's look at a few key differences between them:</p>\n       <ol>\n         <li>\n           An <em>interface</em> cannot have member access modifiers - everything in an <em>interface</em> is public by default. For an abstract class, everything remains the same as for a regular class.\n           <div className=\"columns\">\n             <div className=\"column col-6\">\n               <SnippetL03S03 mdxType=\"SnippetL03S03\" />\n             </div>\n             <div className=\"column col-6\">\n               <SnippetL03S04 mdxType=\"SnippetL03S04\" />\n             </div>\n           </div>\n         </li>\n         <li>\n           In an <em>interface</em>, we can only describe the signature of a method without implementing it. And in the <em>abstract class</em> there can be both abstract methods and properties, and non-abstract ones - with full or partial implementation.\n           <div className=\"columns\">\n             <div className=\"column col-6\">\n               <SnippetL03S05 mdxType=\"SnippetL03S05\" />\n             </div>\n             <div className=\"column col-6\">\n               <SnippetL03S06 mdxType=\"SnippetL03S06\" />\n             </div>\n           </div>\n         </li>\n         <li>\n           We cannot declare a constructor in the body of an <em>interface</em> with or without an access modifier. In an <em>abstract class</em>, we can declare constructors in the same way as in regular classes. It is mainly used to call in the <em>derived class</em> constructor so as not to duplicate the field or property initialization code of the <em>abstract class</em>.\n           <div className=\"columns\">\n             <div className=\"column col-6\">\n               <SnippetL03S07 mdxType=\"SnippetL03S07\" />\n             </div>\n             <div className=\"column col-6\">\n               <SnippetL03S08 mdxType=\"SnippetL03S08\" />\n             </div>\n           </div>\n         </li>\n         <li>\n           We cannot explicitly instantiate an <em>interface</em> or <em>abstract class</em> by calling the constructor. Although let me remind you that <em>abstract class</em> can have it.\n           <SnippetL03S09 mdxType=\"SnippetL03S09\" />\n         </li>\n         <li>\n           An <em>abstract class</em> can have fields and properties, an <em>interface</em> can only have properties.\n           <div className=\"columns\">\n             <div className=\"column col-6\">\n               <SnippetL03S10 mdxType=\"SnippetL03S10\" />\n             </div>\n             <div className=\"column col-6\">\n               <SnippetL03S11 mdxType=\"SnippetL03S11\" />\n             </div>\n           </div>\n         </li>\n       </ol>\n       <h6>What, why and where?</h6>\n       <p>The <strong>Interface</strong> we use to describe the <strong>API</strong> for multiple classes that are likely to implement more than one interface. Remember that interface members cannot be static. <em>C#</em>, unlike <em>C++</em>, does not support multiple inheritance, so we use interfaces to implement it.</p>\n       <p><strong>Abstract class</strong> is used if we want to include it in the inheritance hierarchy and create functionality with a full or partial implementation that the derived class can implement or override. <em>Abstract class</em> allows you to save the state of the class as a whole, and not just its individual object.</p>\n       <p><em>Interface</em> is mainly used when we just want to describe the <strong>API</strong> usage of the classes that will implement this interface - set the behavior.</p>\n     </div>\n   </li>\n  <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-IDisposable\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-IDisposable\">\n       <h5><strong>IDisposable interface</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p><code>IDisposable</code> declares a single <code>Dispose</code> method, in which the implementation of the interface in the class should release unmanaged resources such as database connections, file descriptors, network connections, and volumes. similar.\n          Unmanaged resources should be freed as soon as possible, before the object is removed from memory when the <em>Garbage Collector</em> gets to it.\n          For example, our class interacts with the file system - opens a file, reads something from it, writes. And it's better to finish working with this file as soon as possible so that other programs or threads can use it.\n          And another thing, we ourselves need to explicitly call the <code>Dispose</code> method, because the <em>Garbage Collector</em> knows nothing about it. This is best done in a <code>try...finally</code> block so that even if an error occurs, we can free the resources and clean up the memory properly.\n       </p>\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-IDisposable-example\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-IDisposable-example\">\n             IDisposable implementation example\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S31 mdxType=\"SnippetL03S31\" />\n           </div>\n         </li>\n       </ul>\n     </div>\n   </li>\n  <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-7\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-7\">\n       <h5><strong>Extension methods</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p><em>Extension methods</em> allow you to \"add\" methods to existing types without creating a new derived type, recompiling, or modifying the original type.\n       The <em>Extension method</em> is a special <em>static method</em> that must be a member of a static class.</p>\n       <SnippetL03S14 mdxType=\"SnippetL03S14\" />\n       <p>The example shows the <em>Extension method</em> for the <code>String</code> type. The <em>Static class</em> can have an arbitrary name, while the name of the method must be different from the existing methods in the class we are extending, or have a different signature.\n       In the future, we can use the method we declared in the same way as ordinary methods of the class we are extending.</p>\n     </div>\n   </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-8\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-8\">\n      <h5><strong>Generics</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p><strong>Generics</strong> appeared in <strong>C# 2.0</strong>. They brought the concept of <em>typed parameters</em> to <strong>.NET</strong> - this allows you to design classes and methods that determine the type of class or method members only at initialization.</p>\n       <p>For example, using a generic type parameter <code>T</code>, we can write a single class that will be used by client code without the risk of performing <em>boxing</em> operations (which are heavy operations in their own right). , and abuse them is not good).</p>\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Generic-example\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Generic-example\">\n             An example of declaring a <code>Generic</code> class\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S15 mdxType=\"SnippetL03S15\" />\n             <p>As you can see from the code above, <code>MyGenericClass</code> is defined with <code>&lt;T&gt;</code>. <code>&lt;T&gt;</code> indicates that <code>MyGenericClass</code> is a generic, and the <code>T</code> type will be defined later. You can use any letter or word instead of <code>T</code>, it doesn't matter.</p>\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Generic-example-2\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Generic-example-2\">\n             An example of creating an instance of the <code>Generic</code> class\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S16 mdxType=\"SnippetL03S16\" />\n             <p>The compiler now infers the type of class members based on the type passed in by the programmer when the class was created. For example, the following code uses the data type <code>int</code>.</p>\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Generic-constraints\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Generic-constraints\">\n             Restrictions in <code>Generic</code>\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p>C# has <em>Constraint</em>s to restrict the types that can be used in a generic class. For example, if through <em>Constraint</em> we indicate that the type <code>T</code> can only be <em>reference type</em>, that is, classes, then we will not be able to use <em>value type</em> to instantiate the generic class.\n             Accordingly, after that we cannot use structural types such as <code>int</code> - this will cause a compilation error.</p>\n             <SnippetL03S17 mdxType=\"SnippetL03S17\" />\n           </div>\n         </li>\n          <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Generic-all-constraints\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Generic-all-constraints\">\n             All <code>Generic</code> restrictions\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p>Here are all possible <em>Constraint</em>-s that can be used to constrain types for use in generic classes:</p>\n             <img src={constraintsTypes} alt=\"constraints-types\" />\n           </div>\n         </li>\n       </ul>\n     </div>\n  </li>\n  <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-4\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-4\">\n       <h5><strong>Nullable</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>Obviously <em>structural data type</em> we cannot assign <code>null</code> values. To do this, we need to declare a variable with the <code>?</code> modifier. This modifier is an <em>alias</em> of the <code>Nullable&lt;T&gt;</code></p> structure\n       <SnippetL03S18 mdxType=\"SnippetL03S18\" />\n       <p>Signature <code>Nullable&lt;T&gt;</code>:</p>\n       <SnippetL03S19 mdxType=\"SnippetL03S19\" />\n       <p>When we wrap a variable in a <code>Nullable</code> type, we have a new <strong>API</strong> to interact with this variable:</p>\n       <ul>\n         <li>Property <code>HasValue</code>, returns <code>true</code> if the variable has a value and <code>false</code> if it is <code>null</code> </li>\n         <SnippetL03S20 mdxType=\"SnippetL03S20\" />\n         <li><code>Value</code> returns the actual value stored in the variable if <code>HasValue</code> is equal to <code>true</code>. Otherwise, <code>Value</code> throws <code>InvalidOperationException</code> if the variable is <code>null</code>.</li>\n       </ul>\n     </div>\n   </li>\n <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-3-10\" />\n     <label className=\"summary\" htmlFor=\"accordion-3-10\">\n       <h5><strong>Events & Delegates + Lambdas</strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p><strong>Delegates</strong> are objects that point to methods; with them we can call the methods assigned to the delegate. Delegates allow you to represent methods as objects and pass them to functions, use them as <em>callbacks</em>.</p>\n       <p><strong>Events</strong> are delegate objects that report that some event (<em>action</em>) has occurred.</p>\n       <p><strong>Lambda expressions</strong> are shorthand for <em>anonymous methods</em>. This allows you to create concise methods that can return some value.</p>\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Lambdas\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Lambdas\">\n             Syntax of lambda expressions\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <img src={lambdaExpressionStructure} alt=\"lambdaExpressionStructure\" />\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Delegates\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Delegates\">\n             Delegate example\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S21 mdxType=\"SnippetL03S21\" />\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Action\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Action\">\n             <code>Action</code>, <code>Func</code> and <code>Predicate</code>\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p>Instead of defining a new delegate type, you can use the already defined <em>Action</em>, <em>Func</em>, and <em>Predicate</em> delegates.</p>\n             <ul>\n                 The <li>generic delegate <em>Action &lt;T&gt;</em> is intended to refer to a method that returns <code>void</code>. You can pass up to 16 parameters of any type to this delegate class.\n                 <SnippetL03S22 mdxType=\"SnippetL03S22\" />\n                 </li>\n                 <li>The <em>Func</em> delegates can be used in a similar way. Func allows you to call methods that return something. It can also be passed up to 16 types of parameters and 1 type that it returns.\n                 <SnippetL03S23 mdxType=\"SnippetL03S23\" />\n                 </li>\n                 <li>The <em>Predicate</em> delegate is used to compare whether some <em>T</em> object meets a certain condition. It returns <code>true</code> if the object satisfies the condition, and <code>false</code> if it doesn't.\n                 <SnippetL03S24 mdxType=\"SnippetL03S24\" />\n                 </li>\n             </ul>\n           </div>\n         </li>\n          <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-events\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Events\">\n             Events & Delegates Flow\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <img src={delegateEventFlow} alt=\"delegateEventFlow\" />\n             <p><strong>Events</strong> allow you to tell the system that a specific action has taken place.</p>\n             <p>There is this model: <strong>Publisher-Subscriber</strong><em>(Publisher-Subscriber)</em>. The <em>Subscriber</em> subscribes to the event, defines a handler, and waits for the <em>Publisher</em> to execute the event before triggering it.</p>\n           </div>\n         </li>\n       </ul>\n     </div>\n   </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-11\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-11\">\n      <h5><strong>Collections</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n     <p>In C#, there are <em>arrays</em> that store <em>sets of similar objects</em>, but working with them is not always convenient. Since an array stores <em>a fixed number of objects</em>, in cases where we do not know in advance how many we will have, it will be much more convenient to use <em>collections</em>.</p>\n       <p>When choosing collections, it can be decisive that some of them implement standard data structures, such as:</p>\n       <ul>\n           <li>stack</li>\n           <li>queue</li>\n           <li>dictionary</li>\n           <li>hash table</li>\n       </ul>\n       <p>...which can be useful for various special tasks. The basis for creating all collections is the implementation of the interfaces <code>IEnumerator</code> and <code>IEnumerable</code>.</p>\n       <p>The <code>IEnumerator</code> interface represents an <em>enumerator</em> that makes it possible to iterate through a collection, for example in a <code>foreach</code> loop, or by means of <a href=\"https: //docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">LINQ</a>. And the <code>IEnumerable</code> interface, through its <code>GetEnumerator</code> method, provides an enumerator to all classes that implement this interface. Therefore, the <code>IEnumerable</code> interface is the base interface for all collections.</p>\n       <p>Specific methods and uses may differ from one collection class to another, but the general principles will be the same for all collection classes.</p>\n       <ul>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Collections-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Collections-Hierarchy\">\n            Collections Hierarchy\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <img src={collectionsHierarchy} alt=\"collectionsHierarchy\" />\n          </div> \n        </li>\n            <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-ArrayList\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-ArrayList\">\n             ArrayList & List\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p>This example uses two collections: <strong>non-generic</strong> is <code>ArrayList</code> and <strong>generic</strong> is <code>List</code>. It is now considered good practice to use the generic version of collections wherever possible due to strong typing and ease of use. Most collections support adding items.</p>\n             <SnippetL03S25 mdxType=\"SnippetL03S25\" />\n             <p>For example, in this case, adding is done using the <code>Add</code> method, but for other collections, the name of the method may differ. Also, most collections implement removal (in this example, it is done using the <code>RemoveAt</code> method, which removes an element from the collection by index). Using the <code>Count</code> property, you can see the number of elements in the collection.</p>\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Stack\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Stack\">\n             Stack\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p><code>Stack&lt;T&gt;</code> represents a collection that uses the <strong>LIFO</strong> - last in - first out - algorithm. With this data organization, each next element is placed on top of the previous one. Elements are retrieved from the collection in the reverse order - the element that is highest on the stack is retrieved.</p>\n             <img src={stack} alt=\"stack\" />\n             <p>In the <code>Stack</code> class, there are two main methods that allow you to manage elements - these are:</p>\n             <ul>\n               <li><code>Push</code>: Pushes an element onto the stack in first place</li>\n               <li><code>Pop</code>: Gets the first element from the stack</li>\n               <li><code>Peek</code>:* simply returns the first element from the stack without removing it</li>\n             </ul>\n             <SnippetL03S32 mdxType=\"SnippetL03S32\" />\n             <div className=\"bubble medium subtle\">The example shows how we instantiate the ribbon stack collection. Add 3 cities — \"Lviv\", \"Kyiv\", \"Odessa\" using the <code>Push</code> method. We pull out the element that we added last using the <code>Pop</code> method and display the results on the screen.</div>\n           </div>\n         </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Dictionary\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Dictionary\">\n            Dictionary\n          </label>\n         <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p><code>Dictionary</code> <em>(dictionary)</em> stores objects that represent a key-value pair. It is very handy to use to organize the correspondence of something to something.</p>\n             <p>Each such object is an instance of the <code>KeyValuePair&lt;TKey, TValue&gt;</code> structure. Thanks to the <code>Key</code> and <code>Value</code> properties that this structure has, we can get the key and value of the element in the dictionary.</p>\n             <SnippetL03S26 mdxType=\"SnippetL03S26\" />\n           </div>\n        </li>\n      </ul>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-9\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-9\">\n      <h5><strong>Tuples</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>If you need to glue two values together to return them to a function, or put two values into a <em>hashset</em>, you can use the <code>System.ValueTuple</code></p> types\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Tuples-1\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Tuples-1\">\n             An example of using a tuple\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S27 mdxType=\"SnippetL03S27\" />\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-Tuples-2\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-Tuples-2\">\n             Different scenarios for using tuples\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S28 mdxType=\"SnippetL03S28\" />\n             <ol>\n               <li>Creating a tuple</li>\n               <li>Using a tuple to type <code>Dictionary</code></li>\n               <li>Adding tuple elements to <code>Dictionary</code></li>\n               <li>Returning a dictionary value by key</li>\n               <li>Destructuring a tuple element</li>\n               <li>Access tuple members by name</li>\n             </ol>\n           </div>\n         </li>\n       </ul>\n     </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-12\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-12\">\n      <h5><strong>Exceptions</strong></h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n     <p>Sometimes when running a program, errors occur that are difficult or impossible to predict (for example, when transferring a file over a network, the Internet connection may be interrupted). Such situations are called <strong>Exception</strong>s. The C# language provides developers with the ability to handle such situations using the <code>try...catch...finally</code></p> construct\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-3-try-catch-finally\" />\n           <label className=\"summary\" htmlFor=\"accordion-3-try-catch-finally\">\n             <code>try...catch...finally</code> example\n           </label>\n           <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <SnippetL03S29 mdxType=\"SnippetL03S29\" />\n             <ol>\n               <li>When using a <code>try...catch...finally</code> block, all statements in the <code>try</code> block are executed first.</li>\n               <li>If no <em>Exception</em>s occurred in this block, then the <code>finally</code> block will be executed after it and the <code>try..catch..finally</code> construction will complete your work.</li>\n               <li>If an <em>Exception</em> occurs in a <code>try</code> block, then the normal flow of execution stops and the CLR starts looking for a <code>catch</code> block that can handle this <em>Exception</em>.</li>\n               <li>If the <code>catch</code> block is found, then it is executed, and after its completion, the <code>finally</code> block is executed.</li>\n               <li>If the required <code>catch</code> block is not found, the program crashes.</li>\n             </ol>\n           </div>\n         </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exceptions-Hierarchy\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exceptions-Hierarchy\">\n            <code>Exceptions</code> Hierarchy\n          </label>\n          <div className=\"details-body details-body-with-image\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n           <p>In C#, all <em>Exception</em> types are inherited from the <code>Exception</code> parent class, which is further divided into two branches <code>SystemException</code> and <code>ApplicationException </code>.</p>\n             <p><code>SystemException</code> is the base class for all <em>CLR</em> or code errors such as <code>DivideByZeroException</code> or <code>NullReferenceException</code> and so on.</p>\n             <img src={exceptionClassHierarchy} alt=\"exceptionClassHierarchy\" className=\"bottom-image\" />\n           </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Application-Exception\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Application-Exception\">\n            <code>Application Exception</code>\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <p><code>ApplicationException</code> is used for application related exceptions. This type of exception is very convenient to use to create your own custom <em>Exception</em>-s. To do this, you just need to inherit from the <code>Exception</code> class and add what you want there. Further in this class, you can define additional fields, properties, methods, etc.</p>\n             <SnippetL03S30 mdxType=\"SnippetL03S30\" />\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-Exception-properties\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-Exception-properties\">\n            <code>Exception</code> properties\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n            <div className=\"sl-block is-focused\" data-block-type=\"text\">\n              <div className=\"sl-block-content\" data-placeholder-tag=\"p\" data-placeholder-text=\"Text\">\n                <table>\n                \t<tbody>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.data#System_Exception_Data\">Data</a></td>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary\">IDictionary</a> containing data in key-value pairs.</td>\n                 </tr>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink#System_Exception_HelpLink\">HelpLink</a></td>\n                 <td>May contain a URL (or URN) to a help file that provides comprehensive information about the cause of the error.</td>\n                 </tr>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.innerexception#System_Exception_InnerException\">InnerException</a></td>\n                 <td>This property can be used to create and store an error chain when processing <em>Exception</em>-a. You can use it to create a new exception that contains pre-<em>Exception</em>-s.</td>\n                 </tr>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.message#System_Exception_Message\">Message</a></td>\n                 <td>Provides detailed information about the reason for the exception.</td>\n                 </tr>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.source#System_Exception_Source\">Source</a></td>\n                 <td>Contains the name of the program or object in which the error occurred.</td>\n                 </tr>\n                 <tr>\n                 <td><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.stacktrace#System_Exception_StackTrace\">StackTrace</a></td>\n                 <td>Contains <em>stack trace</em> which can be used to determine where the error occurred. The <em>Stack trace</em> includes the name of the source file and the line number of the program, if available <em>debug information</em>.</td>\n                 </tr>\n                 </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-3-throw\" />\n          <label className=\"summary\" htmlFor=\"accordion-3-throw\">\n            <code>throw</code> it away!\n          </label>\n          <div className=\"details-body\" style={{\n                \"marginBottom\": \"0.5em\"\n              }}>\n             <p>After the <code>throw</code> statement, there is a <code>Exception</code>-a object, in whose constructor we can pass an error message. Instead of the generic <em>Exception</em> type, we can specify an object of any other type <code>Exception</code>.</p>\n             <SnippetL03S33 mdxType=\"SnippetL03S33\" />\n             <p>Similarly, we can throw <code>Exception</code>s anywhere in the program. But there is also another form of using the <code>throw</code> operator, when nothing is specified after this operator.</p>\n             <SnippetL03S34 mdxType=\"SnippetL03S34\" />\n             <p>In this form, the throw statement can only be used in a <code>catch</code> block. The difference between them is that <code>throw</code> without anything keeps the original <code>stack trace</code>, while <code>throw ex</code> resets the <code>stack trace</code> code> to the method currently processing <code>Exception</code>.</p>\n           </div>\n         </li>\n       </ul>\n      </div>\n  </li>\n    </ul>\n    <Level id=\"clean-code-principles\" number=\"4\" name=\"Clean Code Principles\" difficulty=\"Measure twice, cut once.\" objectives=\"Understand how to write code that people want to read.\" labels={{\n      level: \"Section\",\n      backToTop: \"Top\",\n      difficulty: \"Difficulty:\",\n      objectives: \"Objective:\"\n    }} mdxType=\"Level\" />\n    <ul>\n   <li className=\"details\">\n     <input type=\"checkbox\" id=\"accordion-4-1\" />\n     <label className=\"summary\" htmlFor=\"accordion-4-1\">\n       <h5><strong>Coding Standards and <code>Naming Conventions</code></strong></h5>\n     </label>\n     <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p>Translated into human language, generally accepted coding standards and agreed upon rules for how to name variables, functions, etc. This is the C# grammar and spelling adopted by most .NET developers so that other <em> developers (you through X time)</em> could easily and quickly understand what is happening in your code and use it without getting confused in all possible ways to name, say, the <em> argument (and such spelling rules exist in absolutely all programming languages, not only in C#)</em>. It makes no sense to talk about each of the rules for a long time, the main thing for you is to familiarize yourself with the <a href=\"https://www.dofactory.com/reference/csharp-coding-standards\">list of most common C# standards</a>. </p>\n       <div className=\"bubble small subtle\">\n         If you want to be a civilized developer and earn respect among your colleagues, read a few paragraphs with examples of well-formed code and stick to this format when performing tasks small or large.\n       </div>\n     </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-2\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0.25em\"\n            }}>DRY</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          <span style={{\n                \"textDecoration\": \"line-through\",\n                \"opacity\": \"0.75\",\n                \"marginRight\": \"0.25em\"\n              }}>Don't Repeat</span>\n          Don't Repeat Yourself\n        </small>\n      </h5>\n    </label>\n   <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n       <p><strong>Don't repeat yourself</strong> when writing code = don't write multiple times something that can be coded once and called referring to a specific module. An example is a web application containing several blocks of the same design, where each has its own <em>(identical to others!)</em> style descriptions. What is the probability that when all these <em> blocks need to be edited in the same way (manually, because we repeat the same set of styles several times)</em>, the developer will miss one or more of them? When this principle is violated and the implementation of a method or even a class is duplicated without a real need, and several hundred thousand lines of code are written (as in any real project), then for refactoring, changing business logic, or even simple changes in the interface, you have to search for a long time by name method is an unfortunate piece of code, often in order to change only 1 digit in it.</p>\n       <div className=\"bubble small subtle\">\n         In short, it doesn't work that way. To achieve <strong>DRY</strong> in your code - divide it into small pieces; you see that part of the logic is repeated - take it out right away, combine functions. Why is DRY needed? The less code the better. It's easier to maintain, it takes less time to figure it out, and it also reduces bugs.\n       </div>\n     </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-3\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-3\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"marginRight\": \"0\"\n            }}><strong>KISS<sup>💋</sup></strong></span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Keep It Simple Stupid\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n      <p>This principle speaks for itself - simple and concise code is easier to understand for other developers and for you when you return to it after a while. It is formulated as follows - \"each method should solve only one small problem, and not have many different means of consumption.\" If there are many conditions in the method, then break them into smaller methods. Such code is easier to read, maintain, and it also helps to find bugs much faster. To demonstrate <strong>KISS</strong>, the most common example is to define the day of the week:</p>\n      <div className=\"columns\">\n        <div className=\"column col-6\">\n          <h6><strong>Simple</strong></h6>\n          <div>\n            <SnippetL04S01 mdxType=\"SnippetL04S01\" />\n          </div>\n        </div>\n        <div className=\"column col-6\">\n          <h6><strong>Stupid</strong></h6>\n          <div>\n          <SnippetL04S02 mdxType=\"SnippetL04S02\" />\n          </div>\n        </div>\n      </div>\n     <div className=\"bubble small subtle\">\n         The slide shows two methods for solving this problem:\n         <ol className=\"compact\">\n           <li>The first solution is as simple as doors — a simple <code>switch</code> with a default <em>case</em> if the day is not found.</li>\n           <li>The second method is also working, but in order to understand it, you need to read it longer</li>\n         </ol>\n         This kind of code exists everywhere, but it's really awkward and looks unprofessional, 99% of programmers would choose to work with something similar to the first option.\n       </div>\n       <div className=\"bubble small subtle\" style={{\n            \"marginTop\": \"10px\"\n          }}>\n         To achieve <strong>KISS</strong> - try to write as simple code as possible. If you see a complex (unreadable) piece of code, look for a more concise solution to the same problem, and by refactoring what you have written, you will be surprised that a piece of 200 lines is actually not so necessary!\n       </div>\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-4-4\" />\n    <label className=\"summary\" htmlFor=\"accordion-4-4\">\n      <h5 style={{\n            \"display\": \"flex\",\n            \"alignItems\": \"center\"\n          }}>\n        <span style={{\n              \"fontWeight\": \"900\",\n              \"marginRight\": \"0.25em\"\n            }}>SOLID</span>\n        <small style={{\n              \"fontSize\": \"0.5em\",\n              \"textTransform\": \"uppercase\"\n            }}>\n          Single responsibility, Open–closed, Liskov substitution, Interface segregation, Dependency inversion\n        </small>\n      </h5>\n    </label>\n    <div className=\"details-body\" style={{\n          \"marginBottom\": \"0.5em\"\n        }}>\n     <p>SOLID are <strong>5 principles of object-oriented programming</strong> that describe software architecture:</p>\n       <p>In simple terms, these are the rules by which you will write easy-to-understand, edit, or reuse code.</p>\n       <ul>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-4-4-1\" />\n           <label className=\"summary\" htmlFor=\"accordion-4-4-1\">\n             <strong>Single responsibility</strong>\n           </label>\n           <div className=\"details-body\">\n             <p>Single Responsibility Principle. It means that <strong>each class or struct should have only one task.</strong>. All members of the class are written to perform the task given to it, and there is not a single line of code in it that does not apply to the task specified for this block. If we adhere to this principle, then we define classes by their tasks at the design stage of the program.</p>\n              <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Not SOLID\">😢</span></h4>\n                <div>\n                  <SnippetL04S03 mdxType=\"SnippetL04S03\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">😎</span></h4>\n                <div>\n                  <SnippetL04S04 mdxType=\"SnippetL04S04\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n               I gave the <code>Task</code> class as an example - it saves the task to our database and calculates the time required to solve the task.<br />We conclude that it does not comply with the <strong>Single Responsibility Principle</strong>. Why don't we want it to perform other useful functions, such as determining the time needed to complete a task? Because if after some time the customer's <em> task execution parameters change (for example, due to a release or a change in the composition of the programming team)</em>, we will have to rewrite the <code>Task</code> class in accordance with the changes in the original data, and test whether other functionality that <code>Task</code> performs is broken. According to the <strong>Single Responsibility Principle</strong>, we should create a separate class for calculating the time to complete tasks, which will already be guided by business logic and other incoming data.\n             </div>\n           </div>\n         </li>\n         <li className=\"details\">\n           <input type=\"checkbox\" id=\"accordion-4-4-2\" />\n           <label className=\"summary\" htmlFor=\"accordion-4-4-2\">\n             <strong>Open–closed</strong>\n           </label>\n           <div className=\"details-body\">\n             <p>Principle of openness / closeness. Our class should be <strong>open for scaling, but closed for modifications</strong>. Our module should be designed in such a way that it is added only when new requirements are created - but related to the initial task. “Closed for modifications” means that the class is already completely ready and viable, its tasks and purposes do not change, therefore we do not rewrite it significantly, except in case of fixing bugs. In C#, this is achieved by the <strong>principle of inheritance</strong>.</p>\n              <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Not SOLID\">👎</span></h4>\n                <div>\n                  <SnippetL04S05 mdxType=\"SnippetL04S05\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">👍</span></h4>\n                <div>\n                <SnippetL04S06 mdxType=\"SnippetL04S06\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n               <p>Let's consider an example with a mockup - a page prototype. The problem with this class is that when a customer wants to look at a mockup created by designers, but cannot open an image in <em>tiff</em> or <em>cdr</em> format, the developer will need to introduce a new image format, for example <em>png</em>. Therefore, we will be forced to add a new <code>if</code> condition, which contradicts the <strong>Open Closed Principle</strong>.</p>\n               <p>The second example shows how this can be solved - there is a base abstract class <code>Mockup</code> that partially implements image conversion, and child classes implement image conversion to the required format. And if we want to add another format, we just need to create another class that inherits from <code>Mockup</code> and implements the conversion method we need.</p>\n             </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-3\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-3\">\n            <strong>Liskov substitution</strong>\n          </label>\n          <div className=\"details-body\">\n           <p>According to the principle of Liskov substitution, we must <strong>use any child class instead of the parent</strong> in the same way, without making any changes. A child class cannot violate the type definition given in the parent class and contradict its behavior with its own functionality.</p>\n             <div className=\"columns\">\n               <div className=\"column col-6\">\n                 <h4><span className=\"tooltip\" data-tooltip=\"Not SOLID\">🤦‍♂️</span></h4>\n                 <div>\n                   <SnippetL04S07 mdxType=\"SnippetL04S07\" />\n                 </div>\n               </div>\n               <div className=\"column col-6\">\n                 <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">💁‍♂️</span></h4>\n                 <div>\n                   <SnippetL04S08 mdxType=\"SnippetL04S08\" />\n                 </div>\n               </div>\n             </div>\n             <div className=\"bubble small subtle\">\n               Here's how it can be illustrated: <code>Developer</code> is the parent class of <code>JavaScriptDeveloper</code> and <code>CSharpDeveloper</code>. Our <code>Developer</code> class can create backend and frontend applications. It would seem that everything is fine. <code>JavaScriptDeveloper</code> successfully implements 2 methods. But with <code>CSharpDeveloper</code> it's not so simple, he can write a server in <em>ASP.NET</em>, but he can't do it in frontend at all. And if we still try to get a frontend from it, we will catch an error - an exception. In a good way, we need to divide the functionality of <code>Developer</code> into 2 parts: <code>IFrontend</code> and <code>IBackend</code>, and implement them in accordance with the purpose of derived classes: <code> JavaScriptDeveloper</code> implements both <code>IFrontend</code> and <code>IBackend</code>, while <code>CSharpDeveloper</code> only implements <code>IBackend</code>.\n             </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-4\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-4\">\n            <strong>Interface segregation</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>The principle of separation of interfaces says that you should not pack all the interfaces together in a row, you should <strong>separate them by purpose</strong> so that users can selectively implement only those that use <em>and not all in a row that are available in program</em>.</p>\n             <div className=\"columns\">\n               <div className=\"column col-6\">\n                 <h4><span className=\"tooltip\" data-tooltip=\"Not SOLID\">💩</span></h4>\n                 <div>\n                   <SnippetL04S09 mdxType=\"SnippetL04S09\" />\n                 </div>\n               </div>\n               <div className=\"column col-6\">\n                 <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🎉</span></h4>\n                 <div>\n                   <SnippetL04S10 mdxType=\"SnippetL04S10\" />\n                 </div>\n               </div>\n             </div>\n             <div className=\"bubble small subtle\">\n               <p>Let's assume we have an <code>IDeveloper</code> interface that now knows how to create a server and desktop application. As before, we have <code>JavaScriptDeveloper</code> and <code>CSharpDeveloper</code> that can use this functionality as intended. For <em>JavaScript</em>, the application would be written under Electron, and in C# it would be a WPF application. Everything is great, everyone is happy, but no, because our boss suddenly says that his applications on Electron are lagging and it’s generally expensive to pay these JavaScript developers. We are cutting back on JavaScript desktop projects, writing only in WPF now. And in this way we break the <strong>Interface Segregation</strong> principle, because our class cannot but perform its functionality, and it turns out that JavaScript developers are still writing desktop projects.</p>\n               <p>The solution to this problem will again be to split the interface into several: <code>IDesktop</code> and <code>IBackend</code>. This is similar to the previous example, but here we are solving a different problem - preventing the class from doing more than it needs to.</p>\n             </div>\n          </div>\n        </li>\n        <li className=\"details\">\n          <input type=\"checkbox\" id=\"accordion-4-4-5\" />\n          <label className=\"summary\" htmlFor=\"accordion-4-4-5\">\n            <strong>Dependency inversion</strong>\n          </label>\n          <div className=\"details-body\">\n            <p>And now the last and perhaps the most difficult principle to understand is dependency inversion.</p>\n             <ol className=\"inverted\">\n               <li>High-level classes must not depend on lower-level classes, but both must depend on abstractions.</li>\n               <li>Abstractions should not depend on details, but details should depend on abstractions.</li>\n             </ol>\n             <p>What does this mean? And this means that high-level classes implement business rules or logic in the system. The lower-level classes deal with more detailed operations, such as working with a database, passing messages to the operating system, and so on. To achieve dependency inversion, we need to keep these high-level and low-level classes as loosely coupled as possible. And just for this, we write them dependent on abstractions, and not on each other.</p>\n             <div className=\"columns\">\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"Not SOLID\">😭</span></h4>\n                <div>\n                  <SnippetL04S11 mdxType=\"SnippetL04S11\" />\n                </div>\n              </div>\n              <div className=\"column col-6\">\n                <h4><span className=\"tooltip\" data-tooltip=\"SOLID\">🤩</span></h4>\n                <div>\n                  <SnippetL04S12 mdxType=\"SnippetL04S12\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"bubble small subtle\">\n             <p>Let's look at this principle using the example of sending messages. In the first code example, the <code>Notification</code> class is completely dependent on the <code>Email</code> class because it only sends one type of message. What if we want to send in some other way? Then we'll have to dig into the entire messaging system. This is a sign that the system is too tightly coupled.</p>\n               <p>To make it loosely coupled in this case, we need to abstract away the <code>Email</code> message send provider. To do this, we create an interface <code>IMessenger</code> with a method <code>Send</code> and implement it in two classes - <code>Email</code> and <code>SMS</code>. We write the <code>Notification</code> class in such a way as to get rid of the specific implementation of the message distribution. In this case, we can use the <strong>Dependency Injection</strong> principle by passing the <code>Messenger</code> object through the constructor. And as a result, we will send messages of the class with which we are currently working. If we create <code>Notification</code> with <code>Email</code> Messenger, an email is sent. Next, we wanted to change the provider and assigned the <code>Messenger</code> properties to the <code>SMS</code> class, so the next call to the <code>Notify</code> method will already send <em>SMS</em>-ku .</p>\n            </div>\n          </div>\n        </li>\n      </ul>\n      <p>Each <strong>SOLID</strong> principle offers us a way to write logical, reliable, and understandable code, and C#, when followed by these principles, allows you to write large programs and easily extend them.</p>\n     </div>\n   </li>\n    </ul>\n    <ThatsAllFolks mdxType=\"ThatsAllFolks\" />\n    <div className=\"bubble\">\n   I can talk about C# and .NET for a long time, but in this lecture I shared the main, in my opinion, for you at the moment. That's all, thanks for your attention, rate the lecture in your personal accounts, leave feedback, ask questions, do your homework and see you at the code review! 👋\n    </div>\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["metadata","orderId","author","title","description","keywords","duration","publishedAt","hiddenFromMainPage","_frontmatter","layoutProps","MDXLayout","Lecture","MDXContent","components","props","mdxType","currentLanguage","languages","src","frameBorder","allow","allowFullScreen","className","data","ivanHedz2023Avatar","role","href","style","id","timeline","linkTo","number","name","difficulty","objectives","labels","level","backToTop","type","htmlFor","dotnetPlatform","alt","dotnet6Platform","nugetLogo","color","fontWeight","stackAndHeap","boxingUnboxing","constraintsTypes","lambdaExpressionStructure","delegateEventFlow","collectionsHierarchy","stack","exceptionClassHierarchy","isMDXComponent"],"sourceRoot":""}