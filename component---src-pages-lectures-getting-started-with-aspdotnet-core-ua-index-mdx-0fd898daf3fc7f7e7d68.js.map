{"version":3,"file":"component---src-pages-lectures-getting-started-with-aspdotnet-core-ua-index-mdx-0fd898daf3fc7f7e7d68.js","mappings":"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","sources":["webpack://binary-studio-academy-2021-stage-2/./src/pages/lectures/getting-started-with-aspdotnet-core/ua/index.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Lecture, SlackMessage, TimelineOfContents, Level, ThatsAllFolks, VideoWrapper, Language } from \"../../../../components\";\nimport { serhiiYanchuk2023Avatar } from \"../../../../assets/images/avatars/intro-rounded\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGlobe } from \"@fortawesome/pro-solid-svg-icons\";\nimport { faLinkedin, faInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport SnippetL02S01 from \"../assets/snippets/snippet-l02-s01.mdx\";\nimport SnippetL03S01 from \"../assets/snippets/snippet-l03-s01.mdx\";\nimport SnippetL03S02 from \"../assets/snippets/snippet-l03-s02.mdx\";\nimport SnippetL03S03 from \"../assets/snippets/snippet-l03-s03.mdx\";\nimport SnippetL03S04 from \"../assets/snippets/snippet-l03-s04.mdx\";\nimport SnippetL03S05 from \"../assets/snippets/snippet-l03-s05.mdx\";\nimport SnippetL03S06 from \"../assets/snippets/snippet-l03-s06.mdx\";\nimport SnippetL04S01 from \"../assets/snippets/snippet-l04-s01.mdx\";\nimport SnippetL04S02 from \"../assets/snippets/snippet-l04-s02.mdx\";\nimport SnippetL04S03 from \"../assets/snippets/snippet-l04-s03.mdx\";\nimport SnippetL04S04 from \"../assets/snippets/snippet-l04-s04.mdx\";\nimport SnippetL04S05 from \"../assets/snippets/snippet-l04-s05.mdx\";\nimport SnippetL04S06 from \"../assets/snippets/snippet-l04-s06.mdx\";\nimport '../styles.css';\nexport const metadata = {\n  orderId: 5,\n  author: \"Сергій Янчук\",\n  title: \"Getting started with ASP.NET Core\",\n  description: \"Після невеликого вступу, де мова піде про переваги <strong>.NET</strong>, Сергій продемонструє, як створити додаток на <strong>ASP.NET Core</strong> з використанням <strong>ASP.NET Core Web API</strong>, закодить сервіси та контроллери, а потім пояснить, що таке dependency injection, маршрутизацію, middleware та minimal API.\",\n  keywords: [\"hola\", \"guapa\"],\n  duration: \"30 хв\",\n  publishedAt: \"2022-01-02T00:00:00\"\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = Lecture;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div><h1><strong>Getting started with ASP.NET Core</strong></h1></div>\n    <Language currentLanguage=\"ua\" languages={{\n      \"ua\": \"lectures/getting-started-with-aspdotnet-core/ua\",\n      \"en\": \"lectures/getting-started-with-aspdotnet-core/en\"\n    }} mdxType=\"Language\" />\n    <VideoWrapper duration=\"26 min 36 sec\" mdxType=\"VideoWrapper\">\n  <iframe src=\"https://www.youtube.com/embed/PZO2bBM_MVw\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </VideoWrapper>\n    <div>\n  <div className=\"author\">\n    <div className=\"avatar-wrapper\">\n      <object className=\"avatar-object\" data={serhiiYanchuk2023Avatar} role=\"img\" aria-label=\"Serhii Yanchuk\"></object>\n    </div>\n    <div className=\"profile\">\n      <h3 className=\"name\">Сергій Янчук</h3>\n      <ul className=\"contacts\">\n        <li><a href=\"https://www.linkedin.com/in/serhii-yanchuk-b304331a6/\" rel=\"author\" className=\"linkedin\"><FontAwesomeIcon icon={faLinkedin} className=\"icon\" mdxType=\"FontAwesomeIcon\" /><span>serhii-yanchuk</span></a></li>\n        <li><a href=\"https://www.instagram.com/serhii._.yanchuk/\" rel=\"author\" className=\"instagram\"><FontAwesomeIcon icon={faInstagram} className=\"icon\" mdxType=\"FontAwesomeIcon\" /><span>serhii._.yanchuk</span></a></li>\n      </ul>\n      <p className=\"about\">\n        Сергій працює в <a href=\"https://binary-studio.com\"><strong>Binary Studio</strong></a> backend розробником. Він полюбляє кодити та закидувати триочкові в баскетболі. Тому, якщо ти з Києва та хочеш поєднати розмову про програмування з грою у баскетбол, звертайся до нього :D\n      </p>\n    </div>\n  </div>\n  <div className=\"bubble\" style={{\n        \"margin\": \"-0.5em 1em 1em\"\n      }}>\n    <strong>Привіт!</strong> 👋<br />\n    Під час розповіді я дам вам поради та рекомендації, щоб ви краще розуміли як працює наш технічний стек, і до кінця цього уроку у вас буде веб-додаток на ASP.NET Core. Це - ознайомча лекція, тому:\n    <ol className=\"compact inverted\">\n      <li>деякі речі потрібно буде загуглити власноруч;</li>\n      <li>можливо ви вже все це знаєте (повторити все одно не завадить).</li>\n    </ol>\n    Поїхали!\n  </div>\n    </div>\n    <div id=\"table-of-contents\" className=\"table-of-contents\" style={{\n      \"marginTop\": \"1em\"\n    }}>\n  <TimelineOfContents timeline={[{\n        linkTo: \"#intro-to-dotnet\",\n        title: \"Знайомство з .NET\"\n      }, {\n        linkTo: \"#creating-an-app\",\n        title: \"Створення програми\"\n      }, {\n        linkTo: \"#controllers-and-services\",\n        title: \"Контролери та сервіси\"\n      }, {\n        linkTo: \"#additional-features\",\n        title: \"Додаткові функції\"\n      }]} mdxType=\"TimelineOfContents\" />\n    </div>\n    <Level id=\"intro-to-dotnet\" number=\"1\" name={<span>Знайомство з <a href=\"https://dotnet.microsoft.com/download\">.NET</a></span>} difficulty=\"Не хвилюйся.\" objectives=\"Ознайомтеся з основами .NET, тому що ви станете друзями.\" mdxType=\"Level\" />\n    <h5>Як Microsoft придумала те, що ми зараз називаємо .NET</h5>\n    <p>{`Були часи, коли термін «.NET» означав лише платформу Windows. Ця платформа називається .NET Framework. Це наклало деякі обмеження на розгортання, оскільки більшість машин має Linux як операційну систему. Тож люди з Microsoft зібралися на зустріч і придумали .NET Core. Основною ідеєю фреймворку є кросплатформні програми, що означає, що ви можете розмістити свою програму на різних ОС. Починаючи з .NET 5, версія платформи стала називатися .NET (без використання «Core» у назві). Крім того, .NET є open-source, тому має велику підтримку спільноти.`}</p>\n    <h5>.NET переваги</h5>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Кросплатформенність`}</strong><br parentName=\"li\"></br>\n        {`Працює на Windows, Linux, macOS`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Гнучке розгортання`}</strong><br parentName=\"li\"></br>\n        {`Фреймворк можна включити у вашу програму або встановити side-by-side user-або machine-wide`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Інструменти командного рядка`}</strong><br parentName=\"li\"></br>\n        {`.NET has great CLI, .NET має чудовий CLI, тому всі сценарії продукту можна виконувати за допомогою командного рядка`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Сумісність`}</strong><br parentName=\"li\"></br>\n        {`.NET сумісний із .NET Framework, Xamarin і Mono`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Open-source`}</strong><br parentName=\"li\"></br>\n        {`Платформа .NET має відкритий вихідний код і використовує ліцензії MIT і Apache 2. Ви можете зробити внесок у розвиток`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Підтримується Microsoft`}</strong><br parentName=\"li\"></br>\n        {`Величезна корпорація змушує .NET розвиватися та отримувати нові функції`}</li>\n    </ol>\n    <h5>Що можна створити за допомогою .NET</h5>\n    <div className=\"columns\">\n  <div className=\"column col-6\">\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <a href=\"https://docs.microsoft.com/en-us/aspnet/core/mvc/overview\"><strong>ASP.NET Core MVC</strong></a>\n      </div>\n      <div className=\"panel-body\">\n        Веб-програми, які реалізують патерн Model-View-Controller і використовують Razor для розмітки HTML із фрагментами C#\n      </div>\n    </div>\n  </div>\n  <div className=\"column col-6\">\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <a href=\"https://docs.microsoft.com/en-us/aspnet/core/web-api/\"><strong>ASP.NET Core Web API</strong></a>\n      </div>\n      <div className=\"panel-body\">\n       Backend-програма, яка реалізує бізнес-логіку та може використовуватися будь-яким клієнтом <em>(чи це Angular-, React-, або інший frontend фреймворк, mobile apps, тощо.)</em>\n      </div>\n    </div>\n  </div>\n    </div>\n    <h5>З чого потрібно почати</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`.NET SDK`}</strong>{` включає все необхідне для створення та запуску програм .NET. Оскільки ви не обмежені лише Windows, ви можете вибрати будь-яке IDE або текстовий редактор (`}<a href=\"https://visualstudio.microsoft.com/\"><strong>{`Visual Studio`}</strong></a>{`, `}<a href=\"https://code.visualstudio.com/\"><strong>{`Visual Studio Code`}</strong></a>{`, `}<a href=\"https://www.jetbrains.com/rider/\"><strong>{`JetBrains Rider`}</strong></a>{`, `}<a href=\"https://www.sublimetext.com/\"><strong>{`Sublime`}</strong></a>{`, `}<a href=\"https://atom.io/\"><strong>{`Atom`}</strong></a>{`). Ви можете писати код за допомогою свого улюбленого інструменту та виконувати необхідні дії за допомогою CLI. Деякі корисні команди CLI:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet new`}</code>{` — ініціалізує шаблон консольного проекту C#`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet restore`}</code>{` — відновлює залежності програми`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet build`}</code>{` — створює програму .NET`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet publish`}</code>{` — публікує портативну або самодостатню програму .NET`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet run`}</code>{` — запускає програму`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet test`}</code>{` — запускає тести за допомогою програми виконання тестів, вказаної в project.json`}</li>\n          <li parentName=\"ul\"><code parentName=\"li\" {...{\n              \"className\": \"language-text\"\n            }}>{`dotnet pack`}</code>{` — створює пакет NuGet вашого коду`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`.NET Runtime`}</strong>{` містить ресурси, необхідні для запуску програм .NET (це середовище виконання включено до SDK)`}</p>\n      </li>\n    </ul>\n    <Level id=\"creating-an-app\" number=\"2\" name=\"Створення програми\" difficulty=\"Стає тепліше, потрібно друкувати.\" objectives={<span>Зрозуміти анатомію програми ASP.NET Core.</span>} mdxType=\"Level\" />\n    <h5>Що таке ASP.NET Core <sup><strong><a href=\"https://dotnet.microsoft.com/learn/web/what-is-aspnet-core\">[1]</a> <a href=\"https://docs.microsoft.com/en-us/aspnet/core/\">[2]</a></strong></sup></h5>\n    <p><strong parentName=\"p\">{`ASP.NET`}</strong>{` - популярний фреймворк веб-розробки для створення веб-програм на платформі .NET. `}<strong parentName=\"p\">{`ASP.NET Core`}</strong>{` — це версія ASP.NET із відкритим кодом, яка працює на macOS, Linux і Windows. Була уперше випущена у 2016 році та є оновленням попередніх версій ASP.NET лише для Windows. У порівнянні з ASP.NET, версія Core забезпечує:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Чистішу та модульну архітектуру`}</li>\n      <li parentName=\"ul\">{`Посилену безпеку`}</li>\n      <li parentName=\"ul\">{`Покращену продуктивність`}</li>\n    </ul>\n    <h5>Навіщо використовувати ASP.NET Core</h5>\n    <ul>\n      <li parentName=\"ul\">{`Інтеграція сучасних клієнтських фреймворків і робочих процесів розробки`}</li>\n      <li parentName=\"ul\">{`Система конфігурації на основі хмарного середовища`}</li>\n      <li parentName=\"ul\">{`Вбудований dependency injection`}</li>\n      <li parentName=\"ul\">{`Новий легкий і модульний конвеєр запитів HTTP`}</li>\n      <li parentName=\"ul\">{`Створено на платформі .NET, яка підтримує паралельне керування версіями програми`}</li>\n      <li parentName=\"ul\">{`Поставляється повністю як пакети NuGet`}</li>\n      <li parentName=\"ul\">{`Нові інструменти, які спрощують сучасну веб-розробку`}</li>\n      <li parentName=\"ul\">{`Створюйте та запускайте кросплатформенні програми ASP.NET у Windows, Linux і macOS`}</li>\n      <li parentName=\"ul\">{`Відкритий вихідний код, орієнтований на спільноту`}</li>\n    </ul>\n    <h5>Створіть нову програму, запустивши <code>dotnet new webapi</code> або використавши функції вашого IDE <sup><strong><a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/startup\">[1]</a></strong></sup></h5>\n    <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-2-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-2-1\">\n      <strong>Program.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      Ось так виглядає точка входу:\n      <SnippetL02S01 mdxType=\"SnippetL02S01\" />\n      Тут ми можемо налаштувати сервіси, які використовує програма, і визначити, як програма буде оброблювати запити HTTP (ви можете налаштувати конвеєр, який оброблятиме запити).\n    </div>\n  </li>\n    </ul>\n    <Level id=\"controllers-and-services\" number=\"3\" name=\"Контролери та сервіси\" difficulty=\"No kidding.\" objectives=\"Learn that services are no joke and business logic shouldn't live in controllers.\" mdxType=\"Level\" />\n    <p>{`Я покажу вам, як написати API за допомогою `}<strong parentName=\"p\">{`ASP.NET Core Web API`}</strong>{`.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`По-перше, давайте створимо просту програму, яка повертає всіх студентів Binary. Створіть нові файли під назвою `}<strong parentName=\"p\">{`BinaryStudentsController.cs`}</strong>{` у папці `}<strong parentName=\"p\">{`Controllers`}</strong>{` та `}<strong parentName=\"p\">{`BinaryStudent.cs`}</strong>{`, де хочете`}</p>\n        <ul>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-1\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-1\">\n      <strong>BinaryStudentsController.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S01 mdxType=\"SnippetL03S01\" />\n    </div>\n  </li>\n  <li className=\"details\">\n    <input type=\"checkbox\" id=\"accordion-3-2\" />\n    <label className=\"summary\" htmlFor=\"accordion-3-2\">\n      <strong>BinaryStudent.cs</strong>\n    </label>\n    <div className=\"details-body\">\n      <SnippetL03S02 mdxType=\"SnippetL03S02\" />\n    </div>\n  </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Для запуску сервера можна використати команду `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`dotnet run`}</code>{`. Щоб переконатися, що наш API працює, ми повинні надіслати запит до `}<code parentName=\"p\" {...{\n            \"className\": \"language-text\"\n          }}>{`BinaryStudentsController`}</code>{`. Відкрийте `}<a parentName=\"p\" {...{\n            \"href\": \"https://localhost:7088/binarystudents\"\n          }}><strong parentName=\"a\">{`https://localhost:7088/binarystudents`}</strong></a>{` — ви повинні отримати студентів у форматі JSON (номер порту можна знайти у файлі launchSettings.json).`}</p>\n        <div className=\"bubble small subtle\">\n  Ви можете використовувати Postman для тестування свого API або, наприклад, використовувати розширення для VSCode ― <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\"><strong>REST Client</strong></a>\n        </div>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Давайте ще трохи попрактикуємось і ускладнимо наш додаток, додамо більше кінцевих точок (endpoints) і залежностей. Модифікований контролер буде повним CRUD (C - create, R - read, U - update, D - delete) контролером.\nПисати бізнес-логіку в контролерах – не найкраща ідея, тому було б краще, якби ми створили для цього окремий сервіс.`}</p>\n  <ul>\n    <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-3\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-3\">\n        <strong>IBinaryStudentService.cs</strong>\n      </label>\n      <div className=\"details-body\">\n        <SnippetL03S03 mdxType=\"SnippetL03S03\" />\n      </div>\n    </li>\n    <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-4\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-4\">\n        <strong>BinaryStudentService.cs</strong>\n      </label>\n      <div className=\"details-body\">\n        <SnippetL03S04 mdxType=\"SnippetL03S04\" />\n      </div>\n    </li>\n    <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-5\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-5\">\n        <strong>BinaryStudentsController.cs</strong>\n      </label>\n      <div className=\"details-body\">\n        <SnippetL03S05 mdxType=\"SnippetL03S05\" />\n      </div>\n    </li>\n    <li className=\"details\">\n      <input type=\"checkbox\" id=\"accordion-3-6\" />\n      <label className=\"summary\" htmlFor=\"accordion-3-6\">\n        <strong>Program.cs</strong>\n      </label>\n      <div className=\"details-body\">\n        Нам потрібно зареєструвати наш сервіс. Докладніше про це в параграфі Dependency Injection. \n        <SnippetL03S06 mdxType=\"SnippetL03S06\" />\n      </div>\n    </li>\n  </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Запустіть програму та перевірте три кінцеві точки, щоб переконатися, що все працює.`}</p>\n      </li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://localhost:7088/binarystudents?filter=yan\"\n        }}><strong parentName=\"a\">{`https://localhost:7088/binarystudents?filter=yan`}</strong></a>{` - GET запит, отримання тих студентів, прізвища яких містять рядок фільтра;`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://localhost:7088/binarystudents/1\"\n        }}><strong parentName=\"a\">{`https://localhost:7088/binarystudents/1`}</strong></a>{` - GET запит, пошук студента за ідентифікатором; `}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://localhost:7088/binarystudents\"\n        }}><strong parentName=\"a\">{`https://localhost:7088/binarystudents`}</strong></a>{` - POST запит, додавання нового студента, якого ви визначаєте в тілі запиту у форматі JSON.`}</li>\n    </ul>\n    <Level id=\"additional-features\" number=\"4\" name=\"Додаткові функції\" objectives=\"Усувайте неполадки, налагоджуйте, розширюйте та краще підключайте свою програму.\" mdxType=\"Level\" />\n    <h5 id=\"dependency-injection\">Короткий огляд Dependency Injection (Singleton, Scoped, Transient)</h5>\n    <p>{`Як ми можемо прокинути залежності? Відповідь - це DI або Dependency injection.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\"\n      }}><strong parentName=\"a\">{`Dependency injection (DI)`}</strong></a>{` — патерн проектування програмного забезпечення, який є технікою для досягнення `}<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/modern-web-apps-azure-architecture/architectural-principles#dependency-inversion\"><strong>{`Inversion of Control (IoC)`}</strong></a>{` між класами та їхніми залежностями. У нашому випадку `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BinaryStudentsController`}</code>{` залежить від `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BinaryStudentService`}</code>{`. Може бути випадок, коли ми захочемо використати іншу реалізацію. У цьому випадку нам потрібно буде пройти нашу програму та вручну змінити назву класу в усіх місцях, де він використовується. З DI ми можемо легко зробити це в одному місці (в `}<strong parentName=\"p\">{`Program.cs`}</strong>{`). Контейнер .NET DI бере на себе відповідальність за створення екземпляра залежності та видалення його, коли він більше не потрібен. Є кілька опцій тривалості життя сервісу:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Singleton`}</strong>{` — сервіс створюється під час першого запиту (або коли екземпляр вказано під час реєстрації іншого сервісу при налаштуванні веб-програми). Кожен наступний запит використовує той самий екземпляр.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Scoped`}</strong>{` — сервіс створюється один раз на запит клієнта (connection).`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Transient`}</strong>{` — сервіс створюється кожного разу, коли він запрошується з DI контейнеру. Найкраще підходить для легких сервісів без збереження стану.`}</li>\n    </ol>\n    <p>{`Давайте застосуємо `}<strong parentName=\"p\">{`Singleton`}</strong>{` для нашого сервісу `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`BinaryStudentService`}</code>{`, щоб використовувати ту саму колекцію студентів:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Це можна зробити за допомогою IServiceCollection в `}<strong parentName=\"li\">{`Program.cs`}</strong>{`:`}\n        <SnippetL04S01 mdxType=\"SnippetL04S01\" />\n      </li>\n      <li parentName=\"ol\">{`Ми можемо створити інтерфейс для `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`BinaryStudentService`}</code>{` і прив’язати його до реалізації. Це дозволить нам змінювати реалізацію в одному місці.`}\n        <SnippetL04S02 mdxType=\"SnippetL04S02\" />\n      </li>\n    </ol>\n    <h5>Middleware</h5>\n    <p>{`Middleware - це програмне забезпечення, створюване у вигляді конвейєра (pipeline) додатків для обробки запитів і відповідей. Якщо коротко: програма застосовує всі middlewares однин за іншим для кожного запиту.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/index/_static/request-delegate-pipeline.png\",\n        \"alt\": \"php-fpm_nginx\"\n      }}></img></p>\n    <p>{`Наприклад, якщо ви хочете логувати всі запити, ви можете додати у конвеєр (у наведеному нижче прикладі для спрощення використовується `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Console.WriteLine`}</code>{`, ви можете використовувати будь-який фреймворк для логування). Отже, додайте наступний код до конфігурації конвеєра в `}<strong parentName=\"p\">{`Program.cs`}</strong>{`:`}</p>\n    <SnippetL04S03 mdxType=\"SnippetL04S03\" />\nТепер запустіть програму, надішліть запит і подивіться у консоль.\n    <h5>Маршрутизація</h5>\n    <p>{`Маршрутизація (routing) відповідає за зіставлення URI запитів із селекторами кінцевих точок (endpoints) і відправлення вхідних запитів до кінцевих точок. Маршрути визначаються в програмі та налаштовуються під час запуску програми. Маршрут може додатково отримувати значення з URL-адреси, що міститься в запиті, і ці значення потім можна використовувати для обробки запиту. По суті, маршрутизація — це middleware. Дивлючись на зображення вище, уявіть як запит надходить на сервер, потім він обробляється ланцюгом middleware-ів, а потім middleware маршрутизації співставляє URL з URL-адресою контролеру та іменем метода. У WebAPI ми визначаємо маршрут за допомогою атрибута `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Route`}</code>{`:`}</p>\n    <SnippetL04S04 mdxType=\"SnippetL04S04\" />\nВи можете прописати конкретний рядок або використати плейсхолдер **[controller]**. І якщо ви дотримуєтеся угоди про іменування, тобто ім’я вашого класу має префікс **\"Controller\"** у кінці, тоді замість плейсхолдера буде підставлено ім’я класу без префікса\nІснує той самий атрибут для методів у контролері.\n    <h5>Minimal API</h5>\n    <p>{`Minimal API - це новий спосіб створення API без великої кількості коду на основі контролера. Ви можете визначити кінцеві точки за допомогою цих методів розширення в конфігурації конвеєра:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`MapGet;`}</li>\n      <li parentName=\"ul\">{`MapPost;`}</li>\n      <li parentName=\"ul\">{`MapPut;`}</li>\n      <li parentName=\"ul\">{`MapDelete;`}</li>\n      <li parentName=\"ul\">{`MapMethods.`}</li>\n    </ul>\n    <SnippetL04S05 mdxType=\"SnippetL04S05\" />\nПерший параметр — шлях, який обробляє кінцева точка, а другий — обробник типу делегату.\nЦе зручно, якщо створення цілого контролера безглуздо. Це також зручно, якщо вам потрібно швидко перевірити кінцеву точку.\n    <h5>Коди стану</h5>\n    <p>{`Повертати тільки коди 200 або 500 звісно круто. Але є велика кількість інформативних кодів, тому чого їх не використовувати?\nОдним із способів, щоб задавати конкретні коди стану при відправленні відповіді клієнту, є використання методів класу `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ControllerBase`}</code>{`, від якого наслідується створений нами контролер. Наприклад, наступні методи:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Ok - 200;`}</li>\n      <li parentName=\"ul\">{`Created - 201;`}</li>\n      <li parentName=\"ul\">{`BadRequest - 400;`}</li>\n      <li parentName=\"ul\">{`NotFound - 404;`}</li>\n      <li parentName=\"ul\">{`Forbid - 403;`}</li>\n      <li parentName=\"ul\">{`StatusCode - будь-який код.`}</li>\n    </ul>\n    <p>{`Для того, щоб використати їх, ми повинні обернути тип значення, що повертається, класом `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ActionResult`}</code>{`:`}</p>\n    <SnippetL04S06 mdxType=\"SnippetL04S06\" />\n    <ThatsAllFolks mdxType=\"ThatsAllFolks\" />\n    <div className=\"bubble\">\n  Ось так коротко про ASP.NET Core. На цьому все, дуже дякую за увагу🎩! Ставте питання та залишайте відгуки на лекцію на сайті академії. Успіхів з домашкою, скоро побачимося, бувай!\n    </div>\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["metadata","orderId","author","title","description","keywords","duration","publishedAt","_frontmatter","layoutProps","MDXLayout","Lecture","MDXContent","components","props","mdxType","currentLanguage","languages","src","frameBorder","allow","allowFullScreen","className","data","serhiiYanchuk2023Avatar","role","href","rel","icon","faLinkedin","faInstagram","style","id","timeline","linkTo","number","name","difficulty","objectives","parentName","type","htmlFor","isMDXComponent"],"sourceRoot":""}